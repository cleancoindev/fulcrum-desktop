'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = require('util');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fulcrumCore = require('fulcrum-core');

var _pgFormat = require('pg-format');

var _pgFormat2 = _interopRequireDefault(_pgFormat);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class RecordValues {
  static updateForRecordStatements(db, record) {
    const statements = [];

    statements.push.apply(statements, this.deleteForRecordStatements(db, record, record.form));
    statements.push.apply(statements, this.insertForRecordStatements(db, record, record.form));

    return statements;
  }

  static insertForRecordStatements(db, record, form) {
    const statements = [];

    statements.push(this.insertRowForFeatureStatement(db, form, record, null, record));
    statements.push.apply(statements, this.insertChildFeaturesForFeatureStatements(db, form, record, record));
    statements.push.apply(statements, this.insertMultipleValuesForFeatureStatements(db, form, record, record));
    statements.push.apply(statements, this.insertChildMultipleValuesForFeatureStatements(db, form, record, record));

    return statements;
  }

  static insertRowForFeatureStatement(db, form, feature, parentFeature, record) {
    const values = this.columnValuesForFeature(feature);
    const systemValues = this.systemColumnValuesForFeature(feature, parentFeature, record);

    Object.assign(values, systemValues);

    let tableName = null;

    if (feature instanceof _fulcrumCore.RepeatableItemValue) {
      // TODO(zhm) add public interface for accessing _element, like `get repeatableElement()`
      tableName = this.tableNameWithForm(form, feature._element);
    } else {
      tableName = this.tableNameWithForm(form, null);
    }

    return db.insertStatement(tableName, values, { pk: 'id' });
  }

  static insertChildFeaturesForFeatureStatements(db, form, feature, record) {
    const statements = [];

    for (const formValue of feature.formValues.all) {
      if (formValue.element.isRepeatableElement) {
        // TODO(zhm) add public interface for _items
        for (const repeatableItem of formValue._items) {
          statements.push(this.insertRowForFeatureStatement(db, form, repeatableItem, feature, record));
          statements.push.apply(statements, this.insertChildFeaturesForFeatureStatements(db, form, repeatableItem, record));
        }
      }
    }

    return statements;
  }

  static columnValuesForFeature(feature) {
    const values = {};

    for (const formValue of feature.formValues.all) {
      if (formValue.isEmpty) {
        continue;
      }

      let columnValue = formValue.columnValue;

      if (_lodash2.default.isNumber(columnValue) || _lodash2.default.isString(columnValue) || _lodash2.default.isArray(columnValue) || _lodash2.default.isDate(columnValue)) {
        // don't allow dates greater than 9999, yes - they exist in the wild
        if (_lodash2.default.isDate(columnValue) && columnValue.getFullYear() > 9999) {
          columnValue = null;
        }

        values['f' + formValue.element.key.toLowerCase()] = columnValue;
      } else if (columnValue) {
        Object.assign(values, columnValue);
      }
    }

    return values;
  }

  static insertMultipleValuesForFeatureStatements(db, form, feature, record) {
    const statements = [];

    const values = this.multipleValuesForFeature(feature, record);

    const tableName = this.multipleValueTableNameWithForm(form);

    let parentResourceId = null;

    if (feature instanceof _fulcrumCore.RepeatableItemValue) {
      parentResourceId = feature.id;
    }

    for (const multipleValueItem of values) {
      const insertValues = Object.assign({}, { key: multipleValueItem.element.key, text_value: multipleValueItem.value }, { record_id: record.rowID, record_resource_id: record.id, parent_resource_id: parentResourceId });

      statements.push(db.insertStatement(tableName, insertValues, { pk: 'id' }));
    }

    return statements;
  }

  static insertChildMultipleValuesForFeatureStatements(db, form, feature, record) {
    const statements = [];

    for (const formValue of feature.formValues.all) {
      if (formValue.isRepeatableElement) {
        for (const repeatableItem of formValue._items) {
          statements.push.apply(statements, this.insertMultipleValuesForFeatureStatements(db, form, repeatableItem, record));
          statements.push.apply(statements, this.insertChildMultipleValuesForFeatureStatements(db, form, repeatableItem, record));
        }
      }
    }

    return statements;
  }

  static multipleValuesForFeature(feature, record) {
    const values = [];

    for (const formValue of feature.formValues.all) {
      if (formValue.isEmpty) {
        continue;
      }

      const featureValues = formValue.multipleValues;

      if (featureValues) {
        values.push.apply(values, featureValues);
      }
    }

    return values;
  }

  static systemColumnValuesForFeature(feature, parentFeature, record) {
    const values = {};

    values.record_id = record.rowID;
    values.record_resource_id = record.id;

    if (feature instanceof _fulcrumCore.Record) {
      if (record._projectRowID) {
        values.project_id = record._projectRowID;
      }

      if (record.projectID) {
        values.project_resource_id = record.projectID;
      }

      if (record._assignedToRowID) {
        values.assigned_to_id = record._assignedToRowID;
      }

      if (record.assignedToID) {
        values.assigned_to_resource_id = record.assignedToID;
      }

      if (record._createdByRowID) {
        values.created_by_id = record._createdByRowID;
      }

      if (record.createdByID) {
        values.created_by_resource_id = record.createdByID;
      }

      if (record._updatedByRowID) {
        values.updated_by_id = record._updatedByRowID;
      }

      if (record.updatedByID) {
        values.updated_by_resource_id = record.updatedByID;
      }

      if (record._changesetRowID) {
        values.changeset_id = record._changesetRowID;
      }

      if (record.changesetID) {
        values.changeset_resource_id = record.changesetID;
      }

      if (record.status) {
        values.status = record.status;
      }

      if (record.latitude != null) {
        values.latitude = record.latitude;
      }

      if (record.longitude != null) {
        values.longitude = record.longitude;
      }

      values.altitude = record.altitude;
      values.speed = record.speed;
      values.course = record.course;
      values.vertical_accuracy = record.verticalAccuracy;
      values.horizontal_accuracy = record.horizontalAccuracy;
    } else if (feature instanceof _fulcrumCore.RepeatableItemValue) {
      values.resource_id = feature.id;
      values.index = feature.index;
      values.parent_resource_id = parentFeature.id;

      if (feature.hasCoordinate) {
        values.latitude = feature.latitude;
        values.longitude = feature.longitude;
      }

      // record values
      if (record.status) {
        values.record_status = record.status;
      }

      if (record._projectRowID) {
        values.record_project_id = record._projectRowID;
      }

      if (record.projectID) {
        values.record_project_resource_id = record.projectID;
      }

      if (record._assignedToRowID) {
        values.record_assigned_to_id = record._assignedToRowID;
      }

      if (record.assignedToID) {
        values.record_assigned_to_resource_id = record.assignedToID;
      }

      // linked fields
      if (feature.createdBy) {
        values.created_by_id = feature.createdBy.rowID;
      }

      if (feature.createdByID) {
        values.created_by_resource_id = feature.createdByID;
      }

      if (feature.updatedBy) {
        values.updated_by_id = feature.updatedBy.rowID;
      }

      if (feature.updatedByID) {
        values.updated_by_resource_id = feature.updatedByID;
      }

      if (feature.changeset) {
        values.changeset_id = feature.changeset.rowID;
        values.changeset_resource_id = feature.changesetID;
      } else if (record._changesetRowID) {
        values.changeset_id = record._changesetRowID;
        values.changeset_resource_id = record.changesetID;
      }
    }

    values.title = feature.displayValue;

    values.form_values = JSON.stringify(feature.formValues.toJSON());

    this.setupSearch(values, feature);

    if (feature.hasCoordinate) {
      values.geometry = this.setupPoint(values, feature.latitude, feature.longitude);
    } else {
      values.geometry = null;
    }

    values.created_at = feature.clientCreatedAt || feature.createdAt;
    values.updated_at = feature.clientUpdatedAt || feature.updatedAt;
    values.version = feature.version;

    if (values.created_by_id == null) {
      values.created_by_id = -1;
    }

    if (values.updated_by_id == null) {
      values.updated_by_id = -1;
    }

    values.server_created_at = feature.createdAt;
    values.server_updated_at = feature.updatedAt;

    values.created_duration = feature.createdDuration;
    values.updated_duration = feature.updatedDuration;
    values.edited_duration = feature.editedDuration;

    values.created_latitude = feature.createdLatitude;
    values.created_longitude = feature.createdLongitude;
    values.created_altitude = feature.createdAltitude;
    values.created_horizontal_accuracy = feature.createdAccuracy;

    if (feature.hasCreatedCoordinate) {
      values.created_geometry = this.setupPoint(values, feature.createdLatitude, feature.createdLongitude);
    }

    values.updated_latitude = feature.updatedLatitude;
    values.updated_longitude = feature.updatedLongitude;
    values.updated_altitude = feature.updatedAltitude;
    values.updated_horizontal_accuracy = feature.updatedAccuracy;

    if (feature.hasUpdatedCoordinate) {
      values.updated_geometry = this.setupPoint(values, feature.updatedLatitude, feature.updatedLongitude);
    }

    return values;
  }

  static deleteRowsForRecordStatement(db, record, tableName) {
    return db.deleteStatement(tableName, { record_resource_id: record.id });
  }

  static deleteRowsStatement(db, tableName) {
    return db.deleteStatement(tableName, {});
  }

  static deleteForRecordStatements(db, record, form) {
    const repeatables = form.elementsOfType('Repeatable');

    const statements = [];

    let tableName = this.tableNameWithForm(form, null);

    statements.push(this.deleteRowsForRecordStatement(db, record, tableName));

    for (const repeatable of repeatables) {
      tableName = this.tableNameWithForm(form, repeatable);

      statements.push(this.deleteRowsForRecordStatement(db, record, tableName));
    }

    tableName = this.multipleValueTableNameWithForm(form);

    statements.push(this.deleteRowsForRecordStatement(db, record, tableName));

    return statements;
  }

  static deleteForFormStatements(db, form) {
    const repeatables = form.elementsOfType('Repeatable');

    const statements = [];

    let tableName = this.tableNameWithForm(form, null);

    statements.push(this.deleteRowsStatement(db, tableName));

    for (const repeatable of repeatables) {
      tableName = this.tableNameWithForm(form, repeatable);

      statements.push(this.deleteRowsStatement(db, tableName));
    }

    tableName = this.multipleValueTableNameWithForm(form);

    statements.push(this.deleteRowsStatement(db, tableName));

    return statements;
  }

  static multipleValueTableNameWithForm(form) {
    return (0, _util.format)('account_%s_form_%s_values', form._accountRowID, form.rowID);
  }

  static tableNameWithForm(form, repeatable) {
    if (repeatable == null) {
      return (0, _util.format)('account_%s_form_%s', form._accountRowID, form.rowID);
    }

    return (0, _util.format)('account_%s_form_%s_%s', form._accountRowID, form.rowID, repeatable.key);
  }

  static setupSearch(values, feature) {
    const searchableValue = feature.searchableValue;

    values.record_index_text = searchableValue;
    values.record_index = { raw: `to_tsvector(${(0, _pgFormat2.default)('%L', searchableValue)})` };

    return values;
  }

  static setupPoint(values, latitude, longitude) {
    const wkt = (0, _pgFormat2.default)('POINT(%s %s)', longitude, latitude);

    return { raw: `ST_Force2D(ST_SetSRID(ST_GeomFromText('${wkt}'), 4326))` };
  }
}
exports.default = RecordValues;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9tYWluL21vZGVscy9yZWNvcmQtdmFsdWVzL3JlY29yZC12YWx1ZXMuanMiXSwibmFtZXMiOlsiUmVjb3JkVmFsdWVzIiwidXBkYXRlRm9yUmVjb3JkU3RhdGVtZW50cyIsImRiIiwicmVjb3JkIiwic3RhdGVtZW50cyIsInB1c2giLCJhcHBseSIsImRlbGV0ZUZvclJlY29yZFN0YXRlbWVudHMiLCJmb3JtIiwiaW5zZXJ0Rm9yUmVjb3JkU3RhdGVtZW50cyIsImluc2VydFJvd0ZvckZlYXR1cmVTdGF0ZW1lbnQiLCJpbnNlcnRDaGlsZEZlYXR1cmVzRm9yRmVhdHVyZVN0YXRlbWVudHMiLCJpbnNlcnRNdWx0aXBsZVZhbHVlc0ZvckZlYXR1cmVTdGF0ZW1lbnRzIiwiaW5zZXJ0Q2hpbGRNdWx0aXBsZVZhbHVlc0ZvckZlYXR1cmVTdGF0ZW1lbnRzIiwiZmVhdHVyZSIsInBhcmVudEZlYXR1cmUiLCJ2YWx1ZXMiLCJjb2x1bW5WYWx1ZXNGb3JGZWF0dXJlIiwic3lzdGVtVmFsdWVzIiwic3lzdGVtQ29sdW1uVmFsdWVzRm9yRmVhdHVyZSIsIk9iamVjdCIsImFzc2lnbiIsInRhYmxlTmFtZSIsInRhYmxlTmFtZVdpdGhGb3JtIiwiX2VsZW1lbnQiLCJpbnNlcnRTdGF0ZW1lbnQiLCJwayIsImZvcm1WYWx1ZSIsImZvcm1WYWx1ZXMiLCJhbGwiLCJlbGVtZW50IiwiaXNSZXBlYXRhYmxlRWxlbWVudCIsInJlcGVhdGFibGVJdGVtIiwiX2l0ZW1zIiwiaXNFbXB0eSIsImNvbHVtblZhbHVlIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImlzQXJyYXkiLCJpc0RhdGUiLCJnZXRGdWxsWWVhciIsImtleSIsInRvTG93ZXJDYXNlIiwibXVsdGlwbGVWYWx1ZXNGb3JGZWF0dXJlIiwibXVsdGlwbGVWYWx1ZVRhYmxlTmFtZVdpdGhGb3JtIiwicGFyZW50UmVzb3VyY2VJZCIsImlkIiwibXVsdGlwbGVWYWx1ZUl0ZW0iLCJpbnNlcnRWYWx1ZXMiLCJ0ZXh0X3ZhbHVlIiwidmFsdWUiLCJyZWNvcmRfaWQiLCJyb3dJRCIsInJlY29yZF9yZXNvdXJjZV9pZCIsInBhcmVudF9yZXNvdXJjZV9pZCIsImZlYXR1cmVWYWx1ZXMiLCJtdWx0aXBsZVZhbHVlcyIsIl9wcm9qZWN0Um93SUQiLCJwcm9qZWN0X2lkIiwicHJvamVjdElEIiwicHJvamVjdF9yZXNvdXJjZV9pZCIsIl9hc3NpZ25lZFRvUm93SUQiLCJhc3NpZ25lZF90b19pZCIsImFzc2lnbmVkVG9JRCIsImFzc2lnbmVkX3RvX3Jlc291cmNlX2lkIiwiX2NyZWF0ZWRCeVJvd0lEIiwiY3JlYXRlZF9ieV9pZCIsImNyZWF0ZWRCeUlEIiwiY3JlYXRlZF9ieV9yZXNvdXJjZV9pZCIsIl91cGRhdGVkQnlSb3dJRCIsInVwZGF0ZWRfYnlfaWQiLCJ1cGRhdGVkQnlJRCIsInVwZGF0ZWRfYnlfcmVzb3VyY2VfaWQiLCJfY2hhbmdlc2V0Um93SUQiLCJjaGFuZ2VzZXRfaWQiLCJjaGFuZ2VzZXRJRCIsImNoYW5nZXNldF9yZXNvdXJjZV9pZCIsInN0YXR1cyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiYWx0aXR1ZGUiLCJzcGVlZCIsImNvdXJzZSIsInZlcnRpY2FsX2FjY3VyYWN5IiwidmVydGljYWxBY2N1cmFjeSIsImhvcml6b250YWxfYWNjdXJhY3kiLCJob3Jpem9udGFsQWNjdXJhY3kiLCJyZXNvdXJjZV9pZCIsImluZGV4IiwiaGFzQ29vcmRpbmF0ZSIsInJlY29yZF9zdGF0dXMiLCJyZWNvcmRfcHJvamVjdF9pZCIsInJlY29yZF9wcm9qZWN0X3Jlc291cmNlX2lkIiwicmVjb3JkX2Fzc2lnbmVkX3RvX2lkIiwicmVjb3JkX2Fzc2lnbmVkX3RvX3Jlc291cmNlX2lkIiwiY3JlYXRlZEJ5IiwidXBkYXRlZEJ5IiwiY2hhbmdlc2V0IiwidGl0bGUiLCJkaXNwbGF5VmFsdWUiLCJmb3JtX3ZhbHVlcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b0pTT04iLCJzZXR1cFNlYXJjaCIsImdlb21ldHJ5Iiwic2V0dXBQb2ludCIsImNyZWF0ZWRfYXQiLCJjbGllbnRDcmVhdGVkQXQiLCJjcmVhdGVkQXQiLCJ1cGRhdGVkX2F0IiwiY2xpZW50VXBkYXRlZEF0IiwidXBkYXRlZEF0IiwidmVyc2lvbiIsInNlcnZlcl9jcmVhdGVkX2F0Iiwic2VydmVyX3VwZGF0ZWRfYXQiLCJjcmVhdGVkX2R1cmF0aW9uIiwiY3JlYXRlZER1cmF0aW9uIiwidXBkYXRlZF9kdXJhdGlvbiIsInVwZGF0ZWREdXJhdGlvbiIsImVkaXRlZF9kdXJhdGlvbiIsImVkaXRlZER1cmF0aW9uIiwiY3JlYXRlZF9sYXRpdHVkZSIsImNyZWF0ZWRMYXRpdHVkZSIsImNyZWF0ZWRfbG9uZ2l0dWRlIiwiY3JlYXRlZExvbmdpdHVkZSIsImNyZWF0ZWRfYWx0aXR1ZGUiLCJjcmVhdGVkQWx0aXR1ZGUiLCJjcmVhdGVkX2hvcml6b250YWxfYWNjdXJhY3kiLCJjcmVhdGVkQWNjdXJhY3kiLCJoYXNDcmVhdGVkQ29vcmRpbmF0ZSIsImNyZWF0ZWRfZ2VvbWV0cnkiLCJ1cGRhdGVkX2xhdGl0dWRlIiwidXBkYXRlZExhdGl0dWRlIiwidXBkYXRlZF9sb25naXR1ZGUiLCJ1cGRhdGVkTG9uZ2l0dWRlIiwidXBkYXRlZF9hbHRpdHVkZSIsInVwZGF0ZWRBbHRpdHVkZSIsInVwZGF0ZWRfaG9yaXpvbnRhbF9hY2N1cmFjeSIsInVwZGF0ZWRBY2N1cmFjeSIsImhhc1VwZGF0ZWRDb29yZGluYXRlIiwidXBkYXRlZF9nZW9tZXRyeSIsImRlbGV0ZVJvd3NGb3JSZWNvcmRTdGF0ZW1lbnQiLCJkZWxldGVTdGF0ZW1lbnQiLCJkZWxldGVSb3dzU3RhdGVtZW50IiwicmVwZWF0YWJsZXMiLCJlbGVtZW50c09mVHlwZSIsInJlcGVhdGFibGUiLCJkZWxldGVGb3JGb3JtU3RhdGVtZW50cyIsIl9hY2NvdW50Um93SUQiLCJzZWFyY2hhYmxlVmFsdWUiLCJyZWNvcmRfaW5kZXhfdGV4dCIsInJlY29yZF9pbmRleCIsInJhdyIsIndrdCJdLCJtYXBw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ekMsRUFBd0Q3SSxLQUFLNEMsS0FBN0QsQ0FBUDtBQUNEOztBQUVELFNBQU83QixpQkFBUCxDQUF5QmYsSUFBekIsRUFBK0IySSxVQUEvQixFQUEyQztBQUN6QyxRQUFJQSxjQUFjLElBQWxCLEVBQXdCO0FBQ3RCLGFBQU8sa0JBQU8sb0JBQVAsRUFBNkIzSSxLQUFLNkksYUFBbEMsRUFBaUQ3SSxLQUFLNEMsS0FBdEQsQ0FBUDtBQUNEOztBQUVELFdBQU8sa0JBQU8sdUJBQVAsRUFBZ0M1QyxLQUFLNkksYUFBckMsRUFBb0Q3SSxLQUFLNEMsS0FBekQsRUFBZ0UrRixXQUFXMUcsR0FBM0UsQ0FBUDtBQUNEOztBQUVELFNBQU8rRCxXQUFQLENBQW1CeEYsTUFBbkIsRUFBMkJGLE9BQTNCLEVBQW9DO0FBQ2xDLFVBQU13SSxrQkFBa0J4SSxRQUFRd0ksZUFBaEM7O0FBRUF0SSxXQUFPdUksaUJBQVAsR0FBMkJELGVBQTNCO0FBQ0F0SSxXQUFPd0ksWUFBUCxHQUFzQixFQUFDQyxLQUFNLGVBQWUsd0JBQVMsSUFBVCxFQUFlSCxlQUFmLENBQWlDLEdBQXZELEVBQXRCOztBQUVBLFdBQU90SSxNQUFQO0FBQ0Q7O0FBRUQsU0FBTzBGLFVBQVAsQ0FBa0IxRixNQUFsQixFQUEwQjhELFFBQTFCLEVBQW9DQyxTQUFwQyxFQUErQztBQUM3QyxVQUFNMkUsTUFBTSx3QkFBUyxjQUFULEVBQXlCM0UsU0FBekIsRUFBb0NELFFBQXBDLENBQVo7O0FBRUEsV0FBTyxFQUFDMkUsS0FBTSwwQ0FBMENDLEdBQUssWUFBdEQsRUFBUDtBQUNEO0FBbFkrQjtrQkFBYjFKLFkiLCJmaWxlIjoicmVjb3JkLXZhbHVlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdCB9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IFJlY29yZCwgUmVwZWF0YWJsZUl0ZW1WYWx1ZSB9IGZyb20gJ2Z1bGNydW0tY29yZSc7XG5pbXBvcnQgcGdmb3JtYXQgZnJvbSAncGctZm9ybWF0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjb3JkVmFsdWVzIHtcbiAgc3RhdGljIHVwZGF0ZUZvclJlY29yZFN0YXRlbWVudHMoZGIsIHJlY29yZCkge1xuICAgIGNvbnN0IHN0YXRlbWVudHMgPSBbXTtcblxuICAgIHN0YXRlbWVudHMucHVzaC5hcHBseShzdGF0ZW1lbnRzLCB0aGlzLmRlbGV0ZUZvclJlY29yZFN0YXRlbWVudHMoZGIsIHJlY29yZCwgcmVjb3JkLmZvcm0pKTtcbiAgICBzdGF0ZW1lbnRzLnB1c2guYXBwbHkoc3RhdGVtZW50cywgdGhpcy5pbnNlcnRGb3JSZWNvcmRTdGF0ZW1lbnRzKGRiLCByZWNvcmQsIHJlY29yZC5mb3JtKSk7XG5cbiAgICByZXR1cm4gc3RhdGVtZW50cztcbiAgfVxuXG4gIHN0YXRpYyBpbnNlcnRGb3JSZWNvcmRTdGF0ZW1lbnRzKGRiLCByZWNvcmQsIGZvcm0pIHtcbiAgICBjb25zdCBzdGF0ZW1lbnRzID0gW107XG5cbiAgICBzdGF0ZW1lbnRzLnB1c2godGhpcy5pbnNlcnRSb3dGb3JGZWF0dXJlU3RhdGVtZW50KGRiLCBmb3JtLCByZWNvcmQsIG51bGwsIHJlY29yZCkpO1xuICAgIHN0YXRlbWVudHMucHVzaC5hcHBseShzdGF0ZW1lbnRzLCB0aGlzLmluc2VydENoaWxkRmVhdHVyZXNGb3JGZWF0dXJlU3RhdGVtZW50cyhkYiwgZm9ybSwgcmVjb3JkLCByZWNvcmQpKTtcbiAgICBzdGF0ZW1lbnRzLnB1c2guYXBwbHkoc3RhdGVtZW50cywgdGhpcy5pbnNlcnRNdWx0aXBsZVZhbHVlc0ZvckZlYXR1cmVTdGF0ZW1lbnRzKGRiLCBmb3JtLCByZWNvcmQsIHJlY29yZCkpO1xuICAgIHN0YXRlbWVudHMucHVzaC5hcHBseShzdGF0ZW1lbnRzLCB0aGlzLmluc2VydENoaWxkTXVsdGlwbGVWYWx1ZXNGb3JGZWF0dXJlU3RhdGVtZW50cyhkYiwgZm9ybSwgcmVjb3JkLCByZWNvcmQpKTtcblxuICAgIHJldHVybiBzdGF0ZW1lbnRzO1xuICB9XG5cbiAgc3RhdGljIGluc2VydFJvd0ZvckZlYXR1cmVTdGF0ZW1lbnQoZGIsIGZvcm0sIGZlYXR1cmUsIHBhcmVudEZlYXR1cmUsIHJlY29yZCkge1xuICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMuY29sdW1uVmFsdWVzRm9yRmVhdHVyZShmZWF0dXJlKTtcbiAgICBjb25zdCBzeXN0ZW1WYWx1ZXMgPSB0aGlzLnN5c3RlbUNvbHVtblZhbHVlc0ZvckZlYXR1cmUoZmVhdHVyZSwgcGFyZW50RmVhdHVyZSwgcmVjb3JkKTtcblxuICAgIE9iamVjdC5hc3NpZ24odmFsdWVzLCBzeXN0ZW1WYWx1ZXMpO1xuXG4gICAgbGV0IHRhYmxlTmFtZSA9IG51bGw7XG5cbiAgICBpZiAoZmVhdHVyZSBpbnN0YW5jZW9mIFJlcGVhdGFibGVJdGVtVmFsdWUpIHtcbiAgICAgIC8vIFRPRE8oemhtKSBhZGQgcHVibGljIGludGVyZmFjZSBmb3IgYWNjZXNzaW5nIF9lbGVtZW50LCBsaWtlIGBnZXQgcmVwZWF0YWJsZUVsZW1lbnQoKWBcbiAgICAgIHRhYmxlTmFtZSA9IHRoaXMudGFibGVOYW1lV2l0aEZvcm0oZm9ybSwgZmVhdHVyZS5fZWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhYmxlTmFtZSA9IHRoaXMudGFibGVOYW1lV2l0aEZvcm0oZm9ybSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRiLmluc2VydFN0YXRlbWVudCh0YWJsZU5hbWUsIHZhbHVlcywge3BrOiAnaWQnfSk7XG4gIH1cblxuICBzdGF0aWMgaW5zZXJ0Q2hpbGRGZWF0dXJlc0ZvckZlYXR1cmVTdGF0ZW1lbnRzKGRiLCBmb3JtLCBmZWF0dXJlLCByZWNvcmQpIHtcbiAgICBjb25zdCBzdGF0ZW1lbnRzID0gW107XG5cbiAgICBmb3IgKGNvbnN0IGZvcm1WYWx1ZSBvZiBmZWF0dXJlLmZvcm1WYWx1ZXMuYWxsKSB7XG4gICAgICBpZiAoZm9ybVZhbHVlLmVsZW1lbnQuaXNSZXBlYXRhYmxlRWxlbWVudCkge1xuICAgICAgICAvLyBUT0RPKHpobSkgYWRkIHB1YmxpYyBpbnRlcmZhY2UgZm9yIF9pdGVtc1xuICAgICAgICBmb3IgKGNvbnN0IHJlcGVhdGFibGVJdGVtIG9mIGZvcm1WYWx1ZS5faXRlbXMpIHtcbiAgICAgICAgICBzdGF0ZW1lbnRzLnB1c2godGhpcy5pbnNlcnRSb3dGb3JGZWF0dXJlU3RhdGVtZW50KGRiLCBmb3JtLCByZXBlYXRhYmxlSXRlbSwgZmVhdHVyZSwgcmVjb3JkKSk7XG4gICAgICAgICAgc3RhdGVtZW50cy5wdXNoLmFwcGx5KHN0YXRlbWVudHMsIHRoaXMuaW5zZXJ0Q2hpbGRGZWF0dXJlc0ZvckZlYXR1cmVTdGF0ZW1lbnRzKGRiLCBmb3JtLCByZXBlYXRhYmxlSXRlbSwgcmVjb3JkKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGVtZW50cztcbiAgfVxuXG4gIHN0YXRpYyBjb2x1bW5WYWx1ZXNGb3JGZWF0dXJlKGZlYXR1cmUpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB7fTtcblxuICAgIGZvciAoY29uc3QgZm9ybVZhbHVlIG9mIGZlYXR1cmUuZm9ybVZhbHVlcy5hbGwpIHtcbiAgICAgIGlmIChmb3JtVmFsdWUuaXNFbXB0eSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbGV0IGNvbHVtblZhbHVlID0gZm9ybVZhbHVlLmNvbHVtblZhbHVlO1xuXG4gICAgICBpZiAoXy5pc051bWJlcihjb2x1bW5WYWx1ZSkgfHwgXy5pc1N0cmluZyhjb2x1bW5WYWx1ZSkgfHwgXy5pc0FycmF5KGNvbHVtblZhbHVlKSB8fCBfLmlzRGF0ZShjb2x1bW5WYWx1ZSkpIHtcbiAgICAgICAgLy8gZG9uJ3QgYWxsb3cgZGF0ZXMgZ3JlYXRlciB0aGFuIDk5OTksIHllcyAtIHRoZXkgZXhpc3QgaW4gdGhlIHdpbGRcbiAgICAgICAgaWYgKF8uaXNEYXRlKGNvbHVtblZhbHVlKSAmJiBjb2x1bW5WYWx1ZS5nZXRGdWxsWWVhcigpID4gOTk5OSkge1xuICAgICAgICAgIGNvbHVtblZhbHVlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbHVlc1snZicgKyBmb3JtVmFsdWUuZWxlbWVudC5rZXkudG9Mb3dlckNhc2UoKV0gPSBjb2x1bW5WYWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY29sdW1uVmFsdWUpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih2YWx1ZXMsIGNvbHVtblZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG5cbiAgc3RhdGljIGluc2VydE11bHRpcGxlVmFsdWVzRm9yRmVhdHVyZVN0YXRlbWVudHMoZGIsIGZvcm0sIGZlYXR1cmUsIHJlY29yZCkge1xuICAgIGNvbnN0IHN0YXRlbWVudHMgPSBbXTtcblxuICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMubXVsdGlwbGVWYWx1ZXNGb3JGZWF0dXJlKGZlYXR1cmUsIHJlY29yZCk7XG5cbiAgICBjb25zdCB0YWJsZU5hbWUgPSB0aGlzLm11bHRpcGxlVmFsdWVUYWJsZU5hbWVXaXRoRm9ybShmb3JtKTtcblxuICAgIGxldCBwYXJlbnRSZXNvdXJjZUlkID0gbnVsbDtcblxuICAgIGlmIChmZWF0dXJlIGluc3RhbmNlb2YgUmVwZWF0YWJsZUl0ZW1WYWx1ZSkge1xuICAgICAgcGFyZW50UmVzb3VyY2VJZCA9IGZlYXR1cmUuaWQ7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBtdWx0aXBsZVZhbHVlSXRlbSBvZiB2YWx1ZXMpIHtcbiAgICAgIGNvbnN0IGluc2VydFZhbHVlcyA9IE9iamVjdC5hc3NpZ24oe30sIHtrZXk6IG11bHRpcGxlVmFsdWVJdGVtLmVsZW1lbnQua2V5LCB0ZXh0X3ZhbHVlOiBtdWx0aXBsZVZhbHVlSXRlbS52YWx1ZX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZWNvcmRfaWQ6IHJlY29yZC5yb3dJRCwgcmVjb3JkX3Jlc291cmNlX2lkOiByZWNvcmQuaWQsIHBhcmVudF9yZXNvdXJjZV9pZDogcGFyZW50UmVzb3VyY2VJZH0pO1xuXG4gICAgICBzdGF0ZW1lbnRzLnB1c2goZGIuaW5zZXJ0U3RhdGVtZW50KHRhYmxlTmFtZSwgaW5zZXJ0VmFsdWVzLCB7cGs6ICdpZCd9KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXRlbWVudHM7XG4gIH1cblxuICBzdGF0aWMgaW5zZXJ0Q2hpbGRNdWx0aXBsZVZhbHVlc0ZvckZlYXR1cmVTdGF0ZW1lbnRzKGRiLCBmb3JtLCBmZWF0dXJlLCByZWNvcmQpIHtcbiAgICBjb25zdCBzdGF0ZW1lbnRzID0gW107XG5cbiAgICBmb3IgKGNvbnN0IGZvcm1WYWx1ZSBvZiBmZWF0dXJlLmZvcm1WYWx1ZXMuYWxsKSB7XG4gICAgICBpZiAoZm9ybVZhbHVlLmlzUmVwZWF0YWJsZUVsZW1lbnQpIHtcbiAgICAgICAgZm9yIChjb25zdCByZXBlYXRhYmxlSXRlbSBvZiBmb3JtVmFsdWUuX2l0ZW1zKSB7XG4gICAgICAgICAgc3RhdGVtZW50cy5wdXNoLmFwcGx5KHN0YXRlbWVudHMsIHRoaXMuaW5zZXJ0TXVsdGlwbGVWYWx1ZXNGb3JGZWF0dXJlU3RhdGVtZW50cyhkYiwgZm9ybSwgcmVwZWF0YWJsZUl0ZW0sIHJlY29yZCkpO1xuICAgICAgICAgIHN0YXRlbWVudHMucHVzaC5hcHBseShzdGF0ZW1lbnRzLCB0aGlzLmluc2VydENoaWxkTXVsdGlwbGVWYWx1ZXNGb3JGZWF0dXJlU3RhdGVtZW50cyhkYiwgZm9ybSwgcmVwZWF0YWJsZUl0ZW0sIHJlY29yZCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXRlbWVudHM7XG4gIH1cblxuICBzdGF0aWMgbXVsdGlwbGVWYWx1ZXNGb3JGZWF0dXJlKGZlYXR1cmUsIHJlY29yZCkge1xuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBmb3JtVmFsdWUgb2YgZmVhdHVyZS5mb3JtVmFsdWVzLmFsbCkge1xuICAgICAgaWYgKGZvcm1WYWx1ZS5pc0VtcHR5KSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmZWF0dXJlVmFsdWVzID0gZm9ybVZhbHVlLm11bHRpcGxlVmFsdWVzO1xuXG4gICAgICBpZiAoZmVhdHVyZVZhbHVlcykge1xuICAgICAgICB2YWx1ZXMucHVzaC5hcHBseSh2YWx1ZXMsIGZlYXR1cmVWYWx1ZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cblxuICBzdGF0aWMgc3lzdGVtQ29sdW1uVmFsdWVzRm9yRmVhdHVyZShmZWF0dXJlLCBwYXJlbnRGZWF0dXJlLCByZWNvcmQpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB7fTtcblxuICAgIHZhbHVlcy5yZWNvcmRfaWQgPSByZWNvcmQucm93SUQ7XG4gICAgdmFsdWVzLnJlY29yZF9yZXNvdXJjZV9pZCA9IHJlY29yZC5pZDtcblxuICAgIGlmIChmZWF0dXJlIGluc3RhbmNlb2YgUmVjb3JkKSB7XG4gICAgICBpZiAocmVjb3JkLl9wcm9qZWN0Um93SUQpIHtcbiAgICAgICAgdmFsdWVzLnByb2plY3RfaWQgPSByZWNvcmQuX3Byb2plY3RSb3dJRDtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC5wcm9qZWN0SUQpIHtcbiAgICAgICAgdmFsdWVzLnByb2plY3RfcmVzb3VyY2VfaWQgPSByZWNvcmQucHJvamVjdElEO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLl9hc3NpZ25lZFRvUm93SUQpIHtcbiAgICAgICAgdmFsdWVzLmFzc2lnbmVkX3RvX2lkID0gcmVjb3JkLl9hc3NpZ25lZFRvUm93SUQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQuYXNzaWduZWRUb0lEKSB7XG4gICAgICAgIHZhbHVlcy5hc3NpZ25lZF90b19yZXNvdXJjZV9pZCA9IHJlY29yZC5hc3NpZ25lZFRvSUQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQuX2NyZWF0ZWRCeVJvd0lEKSB7XG4gICAgICAgIHZhbHVlcy5jcmVhdGVkX2J5X2lkID0gcmVjb3JkLl9jcmVhdGVkQnlSb3dJRDtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC5jcmVhdGVkQnlJRCkge1xuICAgICAgICB2YWx1ZXMuY3JlYXRlZF9ieV9yZXNvdXJjZV9pZCA9IHJlY29yZC5jcmVhdGVkQnlJRDtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC5fdXBkYXRlZEJ5Um93SUQpIHtcbiAgICAgICAgdmFsdWVzLnVwZGF0ZWRfYnlfaWQgPSByZWNvcmQuX3VwZGF0ZWRCeVJvd0lEO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnVwZGF0ZWRCeUlEKSB7XG4gICAgICAgIHZhbHVlcy51cGRhdGVkX2J5X3Jlc291cmNlX2lkID0gcmVjb3JkLnVwZGF0ZWRCeUlEO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLl9jaGFuZ2VzZXRSb3dJRCkge1xuICAgICAgICB2YWx1ZXMuY2hhbmdlc2V0X2lkID0gcmVjb3JkLl9jaGFuZ2VzZXRSb3dJRDtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC5jaGFuZ2VzZXRJRCkge1xuICAgICAgICB2YWx1ZXMuY2hhbmdlc2V0X3Jlc291cmNlX2lkID0gcmVjb3JkLmNoYW5nZXNldElEO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnN0YXR1cykge1xuICAgICAgICB2YWx1ZXMuc3RhdHVzID0gcmVjb3JkLnN0YXR1cztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC5sYXRpdHVkZSAhPSBudWxsKSB7XG4gICAgICAgIHZhbHVlcy5sYXRpdHVkZSA9IHJlY29yZC5sYXRpdHVkZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC5sb25naXR1ZGUgIT0gbnVsbCkge1xuICAgICAgICB2YWx1ZXMubG9uZ2l0dWRlID0gcmVjb3JkLmxvbmdpdHVkZTtcbiAgICAgIH1cblxuICAgICAgdmFsdWVzLmFsdGl0dWRlID0gcmVjb3JkLmFsdGl0dWRlO1xuICAgICAgdmFsdWVzLnNwZWVkID0gcmVjb3JkLnNwZWVkO1xuICAgICAgdmFsdWVzLmNvdXJzZSA9IHJlY29yZC5jb3Vyc2U7XG4gICAgICB2YWx1ZXMudmVydGljYWxfYWNjdXJhY3kgPSByZWNvcmQudmVydGljYWxBY2N1cmFjeTtcbiAgICAgIHZhbHVlcy5ob3Jpem9udGFsX2FjY3VyYWN5ID0gcmVjb3JkLmhvcml6b250YWxBY2N1cmFjeTtcbiAgICB9IGVsc2UgaWYgKGZlYXR1cmUgaW5zdGFuY2VvZiBSZXBlYXRhYmxlSXRlbVZhbHVlKSB7XG4gICAgICB2YWx1ZXMucmVzb3VyY2VfaWQgPSBmZWF0dXJlLmlkO1xuICAgICAgdmFsdWVzLmluZGV4ID0gZmVhdHVyZS5pbmRleDtcbiAgICAgIHZhbHVlcy5wYXJlbnRfcmVzb3VyY2VfaWQgPSBwYXJlbnRGZWF0dXJlLmlkO1xuXG4gICAgICBpZiAoZmVhdHVyZS5oYXNDb29yZGluYXRlKSB7XG4gICAgICAgIHZhbHVlcy5sYXRpdHVkZSA9IGZlYXR1cmUubGF0aXR1ZGU7XG4gICAgICAgIHZhbHVlcy5sb25naXR1ZGUgPSBmZWF0dXJlLmxvbmdpdHVkZTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVjb3JkIHZhbHVlc1xuICAgICAgaWYgKHJlY29yZC5zdGF0dXMpIHtcbiAgICAgICAgdmFsdWVzLnJlY29yZF9zdGF0dXMgPSByZWNvcmQuc3RhdHVzO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLl9wcm9qZWN0Um93SUQpIHtcbiAgICAgICAgdmFsdWVzLnJlY29yZF9wcm9qZWN0X2lkID0gcmVjb3JkLl9wcm9qZWN0Um93SUQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQucHJvamVjdElEKSB7XG4gICAgICAgIHZhbHVlcy5yZWNvcmRfcHJvamVjdF9yZXNvdXJjZV9pZCA9IHJlY29yZC5wcm9qZWN0SUQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQuX2Fzc2lnbmVkVG9Sb3dJRCkge1xuICAgICAgICB2YWx1ZXMucmVjb3JkX2Fzc2lnbmVkX3RvX2lkID0gcmVjb3JkLl9hc3NpZ25lZFRvUm93SUQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQuYXNzaWduZWRUb0lEKSB7XG4gICAgICAgIHZhbHVlcy5yZWNvcmRfYXNzaWduZWRfdG9fcmVzb3VyY2VfaWQgPSByZWNvcmQuYXNzaWduZWRUb0lEO1xuICAgICAgfVxuXG4gICAgICAvLyBsaW5rZWQgZmllbGRzXG4gICAgICBpZiAoZmVhdHVyZS5jcmVhdGVkQnkpIHtcbiAgICAgICAgdmFsdWVzLmNyZWF0ZWRfYnlfaWQgPSBmZWF0dXJlLmNyZWF0ZWRCeS5yb3dJRDtcbiAgICAgIH1cblxuICAgICAgaWYgKGZlYXR1cmUuY3JlYXRlZEJ5SUQpIHtcbiAgICAgICAgdmFsdWVzLmNyZWF0ZWRfYnlfcmVzb3VyY2VfaWQgPSBmZWF0dXJlLmNyZWF0ZWRCeUlEO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmVhdHVyZS51cGRhdGVkQnkpIHtcbiAgICAgICAgdmFsdWVzLnVwZGF0ZWRfYnlfaWQgPSBmZWF0dXJlLnVwZGF0ZWRCeS5yb3dJRDtcbiAgICAgIH1cblxuICAgICAgaWYgKGZlYXR1cmUudXBkYXRlZEJ5SUQpIHtcbiAgICAgICAgdmFsdWVzLnVwZGF0ZWRfYnlfcmVzb3VyY2VfaWQgPSBmZWF0dXJlLnVwZGF0ZWRCeUlEO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmVhdHVyZS5jaGFuZ2VzZXQpIHtcbiAgICAgICAgdmFsdWVzLmNoYW5nZXNldF9pZCA9IGZlYXR1cmUuY2hhbmdlc2V0LnJvd0lEO1xuICAgICAgICB2YWx1ZXMuY2hhbmdlc2V0X3Jlc291cmNlX2lkID0gZmVhdHVyZS5jaGFuZ2VzZXRJRDtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLl9jaGFuZ2VzZXRSb3dJRCkge1xuICAgICAgICB2YWx1ZXMuY2hhbmdlc2V0X2lkID0gcmVjb3JkLl9jaGFuZ2VzZXRSb3dJRDtcbiAgICAgICAgdmFsdWVzLmNoYW5nZXNldF9yZXNvdXJjZV9pZCA9IHJlY29yZC5jaGFuZ2VzZXRJRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWx1ZXMudGl0bGUgPSBmZWF0dXJlLmRpc3BsYXlWYWx1ZTtcblxuICAgIHZhbHVlcy5mb3JtX3ZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGZlYXR1cmUuZm9ybVZhbHVlcy50b0pTT04oKSk7XG5cbiAgICB0aGlzLnNldHVwU2VhcmNoKHZhbHVlcywgZmVhdHVyZSk7XG5cbiAgICBpZiAoZmVhdHVyZS5oYXNDb29yZGluYXRlKSB7XG4gICAgICB2YWx1ZXMuZ2VvbWV0cnkgPSB0aGlzLnNldHVwUG9pbnQodmFsdWVzLCBmZWF0dXJlLmxhdGl0dWRlLCBmZWF0dXJlLmxvbmdpdHVkZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlcy5nZW9tZXRyeSA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFsdWVzLmNyZWF0ZWRfYXQgPSBmZWF0dXJlLmNsaWVudENyZWF0ZWRBdCB8fCBmZWF0dXJlLmNyZWF0ZWRBdDtcbiAgICB2YWx1ZXMudXBkYXRlZF9hdCA9IGZlYXR1cmUuY2xpZW50VXBkYXRlZEF0IHx8IGZlYXR1cmUudXBkYXRlZEF0O1xuICAgIHZhbHVlcy52ZXJzaW9uID0gZmVhdHVyZS52ZXJzaW9uO1xuXG4gICAgaWYgKHZhbHVlcy5jcmVhdGVkX2J5X2lkID09IG51bGwpIHtcbiAgICAgIHZhbHVlcy5jcmVhdGVkX2J5X2lkID0gLTE7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlcy51cGRhdGVkX2J5X2lkID09IG51bGwpIHtcbiAgICAgIHZhbHVlcy51cGRhdGVkX2J5X2lkID0gLTE7XG4gICAgfVxuXG4gICAgdmFsdWVzLnNlcnZlcl9jcmVhdGVkX2F0ID0gZmVhdHVyZS5jcmVhdGVkQXQ7XG4gICAgdmFsdWVzLnNlcnZlcl91cGRhdGVkX2F0ID0gZmVhdHVyZS51cGRhdGVkQXQ7XG5cbiAgICB2YWx1ZXMuY3JlYXRlZF9kdXJhdGlvbiA9IGZlYXR1cmUuY3JlYXRlZER1cmF0aW9uO1xuICAgIHZhbHVlcy51cGRhdGVkX2R1cmF0aW9uID0gZmVhdHVyZS51cGRhdGVkRHVyYXRpb247XG4gICAgdmFsdWVzLmVkaXRlZF9kdXJhdGlvbiA9IGZlYXR1cmUuZWRpdGVkRHVyYXRpb247XG5cbiAgICB2YWx1ZXMuY3JlYXRlZF9sYXRpdHVkZSA9IGZlYXR1cmUuY3JlYXRlZExhdGl0dWRlO1xuICAgIHZhbHVlcy5jcmVhdGVkX2xvbmdpdHVkZSA9IGZlYXR1cmUuY3JlYXRlZExvbmdpdHVkZTtcbiAgICB2YWx1ZXMuY3JlYXRlZF9hbHRpdHVkZSA9IGZlYXR1cmUuY3JlYXRlZEFsdGl0dWRlO1xuICAgIHZhbHVlcy5jcmVhdGVkX2hvcml6b250YWxfYWNjdXJhY3kgPSBmZWF0dXJlLmNyZWF0ZWRBY2N1cmFjeTtcblxuICAgIGlmIChmZWF0dXJlLmhhc0NyZWF0ZWRDb29yZGluYXRlKSB7XG4gICAgICB2YWx1ZXMuY3JlYXRlZF9nZW9tZXRyeSA9IHRoaXMuc2V0dXBQb2ludCh2YWx1ZXMsIGZlYXR1cmUuY3JlYXRlZExhdGl0dWRlLCBmZWF0dXJlLmNyZWF0ZWRMb25naXR1ZGUpO1xuICAgIH1cblxuICAgIHZhbHVlcy51cGRhdGVkX2xhdGl0dWRlID0gZmVhdHVyZS51cGRhdGVkTGF0aXR1ZGU7XG4gICAgdmFsdWVzLnVwZGF0ZWRfbG9uZ2l0dWRlID0gZmVhdHVyZS51cGRhdGVkTG9uZ2l0dWRlO1xuICAgIHZhbHVlcy51cGRhdGVkX2FsdGl0dWRlID0gZmVhdHVyZS51cGRhdGVkQWx0aXR1ZGU7XG4gICAgdmFsdWVzLnVwZGF0ZWRfaG9yaXpvbnRhbF9hY2N1cmFjeSA9IGZlYXR1cmUudXBkYXRlZEFjY3VyYWN5O1xuXG4gICAgaWYgKGZlYXR1cmUuaGFzVXBkYXRlZENvb3JkaW5hdGUpIHtcbiAgICAgIHZhbHVlcy51cGRhdGVkX2dlb21ldHJ5ID0gdGhpcy5zZXR1cFBvaW50KHZhbHVlcywgZmVhdHVyZS51cGRhdGVkTGF0aXR1ZGUsIGZlYXR1cmUudXBkYXRlZExvbmdpdHVkZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuXG4gIHN0YXRpYyBkZWxldGVSb3dzRm9yUmVjb3JkU3RhdGVtZW50KGRiLCByZWNvcmQsIHRhYmxlTmFtZSkge1xuICAgIHJldHVybiBkYi5kZWxldGVTdGF0ZW1lbnQodGFibGVOYW1lLCB7cmVjb3JkX3Jlc291cmNlX2lkOiByZWNvcmQuaWR9KTtcbiAgfVxuXG4gIHN0YXRpYyBkZWxldGVSb3dzU3RhdGVtZW50KGRiLCB0YWJsZU5hbWUpIHtcbiAgICByZXR1cm4gZGIuZGVsZXRlU3RhdGVtZW50KHRhYmxlTmFtZSwge30pO1xuICB9XG5cbiAgc3RhdGljIGRlbGV0ZUZvclJlY29yZFN0YXRlbWVudHMoZGIsIHJlY29yZCwgZm9ybSkge1xuICAgIGNvbnN0IHJlcGVhdGFibGVzID0gZm9ybS5lbGVtZW50c09mVHlwZSgnUmVwZWF0YWJsZScpO1xuXG4gICAgY29uc3Qgc3RhdGVtZW50cyA9IFtdO1xuXG4gICAgbGV0IHRhYmxlTmFtZSA9IHRoaXMudGFibGVOYW1lV2l0aEZvcm0oZm9ybSwgbnVsbCk7XG5cbiAgICBzdGF0ZW1lbnRzLnB1c2godGhpcy5kZWxldGVSb3dzRm9yUmVjb3JkU3RhdGVtZW50KGRiLCByZWNvcmQsIHRhYmxlTmFtZSkpO1xuXG4gICAgZm9yIChjb25zdCByZXBlYXRhYmxlIG9mIHJlcGVhdGFibGVzKSB7XG4gICAgICB0YWJsZU5hbWUgPSB0aGlzLnRhYmxlTmFtZVdpdGhGb3JtKGZvcm0sIHJlcGVhdGFibGUpO1xuXG4gICAgICBzdGF0ZW1lbnRzLnB1c2godGhpcy5kZWxldGVSb3dzRm9yUmVjb3JkU3RhdGVtZW50KGRiLCByZWNvcmQsIHRhYmxlTmFtZSkpO1xuICAgIH1cblxuICAgIHRhYmxlTmFtZSA9IHRoaXMubXVsdGlwbGVWYWx1ZVRhYmxlTmFtZVdpdGhGb3JtKGZvcm0pO1xuXG4gICAgc3RhdGVtZW50cy5wdXNoKHRoaXMuZGVsZXRlUm93c0ZvclJlY29yZFN0YXRlbWVudChkYiwgcmVjb3JkLCB0YWJsZU5hbWUpKTtcblxuICAgIHJldHVybiBzdGF0ZW1lbnRzO1xuICB9XG5cbiAgc3RhdGljIGRlbGV0ZUZvckZvcm1TdGF0ZW1lbnRzKGRiLCBmb3JtKSB7XG4gICAgY29uc3QgcmVwZWF0YWJsZXMgPSBmb3JtLmVsZW1lbnRzT2ZUeXBlKCdSZXBlYXRhYmxlJyk7XG5cbiAgICBjb25zdCBzdGF0ZW1lbnRzID0gW107XG5cbiAgICBsZXQgdGFibGVOYW1lID0gdGhpcy50YWJsZU5hbWVXaXRoRm9ybShmb3JtLCBudWxsKTtcblxuICAgIHN0YXRlbWVudHMucHVzaCh0aGlzLmRlbGV0ZVJvd3NTdGF0ZW1lbnQoZGIsIHRhYmxlTmFtZSkpO1xuXG4gICAgZm9yIChjb25zdCByZXBlYXRhYmxlIG9mIHJlcGVhdGFibGVzKSB7XG4gICAgICB0YWJsZU5hbWUgPSB0aGlzLnRhYmxlTmFtZVdpdGhGb3JtKGZvcm0sIHJlcGVhdGFibGUpO1xuXG4gICAgICBzdGF0ZW1lbnRzLnB1c2godGhpcy5kZWxldGVSb3dzU3RhdGVtZW50KGRiLCB0YWJsZU5hbWUpKTtcbiAgICB9XG5cbiAgICB0YWJsZU5hbWUgPSB0aGlzLm11bHRpcGxlVmFsdWVUYWJsZU5hbWVXaXRoRm9ybShmb3JtKTtcblxuICAgIHN0YXRlbWVudHMucHVzaCh0aGlzLmRlbGV0ZVJvd3NTdGF0ZW1lbnQoZGIsIHRhYmxlTmFtZSkpO1xuXG4gICAgcmV0dXJuIHN0YXRlbWVudHM7XG4gIH1cblxuICBzdGF0aWMgbXVsdGlwbGVWYWx1ZVRhYmxlTmFtZVdpdGhGb3JtKGZvcm0pIHtcbiAgICByZXR1cm4gZm9ybWF0KCdhY2NvdW50XyVzX2Zvcm1fJXNfdmFsdWVzJywgZm9ybS5fYWNjb3VudFJvd0lELCBmb3JtLnJvd0lEKTtcbiAgfVxuXG4gIHN0YXRpYyB0YWJsZU5hbWVXaXRoRm9ybShmb3JtLCByZXBlYXRhYmxlKSB7XG4gICAgaWYgKHJlcGVhdGFibGUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZvcm1hdCgnYWNjb3VudF8lc19mb3JtXyVzJywgZm9ybS5fYWNjb3VudFJvd0lELCBmb3JtLnJvd0lEKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm9ybWF0KCdhY2NvdW50XyVzX2Zvcm1fJXNfJXMnLCBmb3JtLl9hY2NvdW50Um93SUQsIGZvcm0ucm93SUQsIHJlcGVhdGFibGUua2V5KTtcbiAgfVxuXG4gIHN0YXRpYyBzZXR1cFNlYXJjaCh2YWx1ZXMsIGZlYXR1cmUpIHtcbiAgICBjb25zdCBzZWFyY2hhYmxlVmFsdWUgPSBmZWF0dXJlLnNlYXJjaGFibGVWYWx1ZTtcblxuICAgIHZhbHVlcy5yZWNvcmRfaW5kZXhfdGV4dCA9IHNlYXJjaGFibGVWYWx1ZTtcbiAgICB2YWx1ZXMucmVjb3JkX2luZGV4ID0ge3JhdzogYHRvX3RzdmVjdG9yKCR7IHBnZm9ybWF0KCclTCcsIHNlYXJjaGFibGVWYWx1ZSkgfSlgfTtcblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cblxuICBzdGF0aWMgc2V0dXBQb2ludCh2YWx1ZXMsIGxhdGl0dWRlLCBsb25naXR1ZGUpIHtcbiAgICBjb25zdCB3a3QgPSBwZ2Zvcm1hdCgnUE9JTlQoJXMgJXMpJywgbG9uZ2l0dWRlLCBsYXRpdHVkZSk7XG5cbiAgICByZXR1cm4ge3JhdzogYFNUX0ZvcmNlMkQoU1RfU2V0U1JJRChTVF9HZW9tRnJvbVRleHQoJyR7IHdrdCB9JyksIDQzMjYpKWB9O1xuICB9XG59XG4iXX0=
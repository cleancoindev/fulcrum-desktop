'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _minidb = require('minidb');

var _fulcrumCore = require('fulcrum-core');

class Photo {
  static get tableName() {
    return 'photos';
  }

  static get columns() {
    return [{ name: 'accountRowID', column: 'account_id', type: 'integer', null: false }, { name: 'id', column: 'resource_id', type: 'string', null: false }, { name: 'exif', column: 'exif', type: 'json' }, { name: 'filePath', column: 'file_path', type: 'string' }, { name: 'isDownloaded', column: 'is_downloaded', type: 'boolean', null: false }, { name: 'latitude', column: 'latitude', type: 'double' }, { name: 'longitude', column: 'longitude', type: 'double' }, { name: 'formRowID', column: 'form_id', type: 'integer' }, { name: 'recordRowID', column: 'record_id', type: 'integer' }];
  }

  get id() {
    return this._id;
  }

  updateFromAPIAttributes(attributes) {
    this._id = attributes.access_key;
    this._exif = attributes.exif;
    this._createdAt = _fulcrumCore.DateUtils.parseISOTimestamp(attributes.created_at);
    this._updatedAt = _fulcrumCore.DateUtils.parseISOTimestamp(attributes.updated_at);
  }

  get isDownloaded() {
    return this._isDownloaded;
  }

  set isDownloaded(value) {
    this._isDownloaded = !!value;
  }
}

exports.default = Photo;
_minidb.PersistentObject.register(Photo);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tYWluL21vZGVscy9waG90by5qcyJdLCJuYW1lcyI6WyJQaG90byIsInRhYmxlTmFtZSIsImNvbHVtbnMiLCJuYW1lIiwiY29sdW1uIiwidHlwZSIsIm51bGwiLCJpZCIsIl9pZCIsInVwZGF0ZUZyb21BUElBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsImFjY2Vzc19rZXkiLCJfZXhpZiIsImV4aWYiLCJfY3JlYXRlZEF0IiwicGFyc2VJU09UaW1lc3RhbXAiLCJjcmVhdGVkX2F0IiwiX3VwZGF0ZWRBdCIsInVwZGF0ZWRfYXQiLCJpc0Rvd25sb2FkZWQiLCJfaXNEb3dubG9hZGVkIiwidmFsdWUiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7O0FBRWUsTUFBTUEsS0FBTixDQUFZO0FBQ3pCLGFBQVdDLFNBQVgsR0FBdUI7QUFDckIsV0FBTyxRQUFQO0FBQ0Q7O0FBRUQsYUFBV0MsT0FBWCxHQUFxQjtBQUNuQixXQUFPLENBQ0wsRUFBRUMsTUFBTSxjQUFSLEVBQXdCQyxRQUFRLFlBQWhDLEVBQThDQyxNQUFNLFNBQXBELEVBQStEQyxNQUFNLEtBQXJFLEVBREssRUFFTCxFQUFFSCxNQUFNLElBQVIsRUFBY0MsUUFBUSxhQUF0QixFQUFxQ0MsTUFBTSxRQUEzQyxFQUFxREMsTUFBTSxLQUEzRCxFQUZLLEVBR0wsRUFBRUgsTUFBTSxNQUFSLEVBQWdCQyxRQUFRLE1BQXhCLEVBQWdDQyxNQUFNLE1BQXRDLEVBSEssRUFJTCxFQUFFRixNQUFNLFVBQVIsRUFBb0JDLFFBQVEsV0FBNUIsRUFBeUNDLE1BQU0sUUFBL0MsRUFKSyxFQUtMLEVBQUVGLE1BQU0sY0FBUixFQUF3QkMsUUFBUSxlQUFoQyxFQUFpREMsTUFBTSxTQUF2RCxFQUFrRUMsTUFBTSxLQUF4RSxFQUxLLEVBTUwsRUFBRUgsTUFBTSxVQUFSLEVBQW9CQyxRQUFRLFVBQTVCLEVBQXdDQyxNQUFNLFFBQTlDLEVBTkssRUFPTCxFQUFFRixNQUFNLFdBQVIsRUFBcUJDLFFBQVEsV0FBN0IsRUFBMENDLE1BQU0sUUFBaEQsRUFQSyxFQVFMLEVBQUVGLE1BQU0sV0FBUixFQUFxQkMsUUFBUSxTQUE3QixFQUF3Q0MsTUFBTSxTQUE5QyxFQVJLLEVBU0wsRUFBRUYsTUFBTSxhQUFSLEVBQXVCQyxRQUFRLFdBQS9CLEVBQTRDQyxNQUFNLFNBQWxELEVBVEssQ0FBUDtBQVdEOztBQUVELE1BQUlFLEVBQUosR0FBUztBQUNQLFdBQU8sS0FBS0MsR0FBWjtBQUNEOztBQUVEQywwQkFBd0JDLFVBQXhCLEVBQW9DO0FBQ2xDLFNBQUtGLEdBQUwsR0FBV0UsV0FBV0MsVUFBdEI7QUFDQSxTQUFLQyxLQUFMLEdBQWFGLFdBQVdHLElBQXhCO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQix1QkFBVUMsaUJBQVYsQ0FBNEJMLFdBQVdNLFVBQXZDLENBQWxCO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQix1QkFBVUYsaUJBQVYsQ0FBNEJMLFdBQVdRLFVBQXZDLENBQWxCO0FBQ0Q7O0FBRUQsTUFBSUMsWUFBSixHQUFtQjtBQUNqQixXQUFPLEtBQUtDLGFBQVo7QUFDRDs7QUFFRCxNQUFJRCxZQUFKLENBQWlCRSxLQUFqQixFQUF3QjtBQUN0QixTQUFLRCxhQUFMLEdBQXFCLENBQUMsQ0FBQ0MsS0FBdkI7QUFDRDtBQXBDd0I7O2tCQUFOckIsSztBQXVDckIseUJBQWlCc0IsUUFBakIsQ0FBMEJ0QixLQUExQiIsImZpbGUiOiJwaG90by5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBlcnNpc3RlbnRPYmplY3QgfSBmcm9tICdtaW5pZGInO1xuaW1wb3J0IHsgRGF0ZVV0aWxzIH0gZnJvbSAnZnVsY3J1bS1jb3JlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGhvdG8ge1xuICBzdGF0aWMgZ2V0IHRhYmxlTmFtZSgpIHtcbiAgICByZXR1cm4gJ3Bob3Rvcyc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGNvbHVtbnMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHsgbmFtZTogJ2FjY291bnRSb3dJRCcsIGNvbHVtbjogJ2FjY291bnRfaWQnLCB0eXBlOiAnaW50ZWdlcicsIG51bGw6IGZhbHNlIH0sXG4gICAgICB7IG5hbWU6ICdpZCcsIGNvbHVtbjogJ3Jlc291cmNlX2lkJywgdHlwZTogJ3N0cmluZycsIG51bGw6IGZhbHNlIH0sXG4gICAgICB7IG5hbWU6ICdleGlmJywgY29sdW1uOiAnZXhpZicsIHR5cGU6ICdqc29uJyB9LFxuICAgICAgeyBuYW1lOiAnZmlsZVBhdGgnLCBjb2x1bW46ICdmaWxlX3BhdGgnLCB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgeyBuYW1lOiAnaXNEb3dubG9hZGVkJywgY29sdW1uOiAnaXNfZG93bmxvYWRlZCcsIHR5cGU6ICdib29sZWFuJywgbnVsbDogZmFsc2UgfSxcbiAgICAgIHsgbmFtZTogJ2xhdGl0dWRlJywgY29sdW1uOiAnbGF0aXR1ZGUnLCB0eXBlOiAnZG91YmxlJyB9LFxuICAgICAgeyBuYW1lOiAnbG9uZ2l0dWRlJywgY29sdW1uOiAnbG9uZ2l0dWRlJywgdHlwZTogJ2RvdWJsZScgfSxcbiAgICAgIHsgbmFtZTogJ2Zvcm1Sb3dJRCcsIGNvbHVtbjogJ2Zvcm1faWQnLCB0eXBlOiAnaW50ZWdlcicgfSxcbiAgICAgIHsgbmFtZTogJ3JlY29yZFJvd0lEJywgY29sdW1uOiAncmVjb3JkX2lkJywgdHlwZTogJ2ludGVnZXInIH1cbiAgICBdO1xuICB9XG5cbiAgZ2V0IGlkKCkge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuXG4gIHVwZGF0ZUZyb21BUElBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgICB0aGlzLl9pZCA9IGF0dHJpYnV0ZXMuYWNjZXNzX2tleTtcbiAgICB0aGlzLl9leGlmID0gYXR0cmlidXRlcy5leGlmO1xuICAgIHRoaXMuX2NyZWF0ZWRBdCA9IERhdGVVdGlscy5wYXJzZUlTT1RpbWVzdGFtcChhdHRyaWJ1dGVzLmNyZWF0ZWRfYXQpO1xuICAgIHRoaXMuX3VwZGF0ZWRBdCA9IERhdGVVdGlscy5wYXJzZUlTT1RpbWVzdGFtcChhdHRyaWJ1dGVzLnVwZGF0ZWRfYXQpO1xuICB9XG5cbiAgZ2V0IGlzRG93bmxvYWRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNEb3dubG9hZGVkO1xuICB9XG5cbiAgc2V0IGlzRG93bmxvYWRlZCh2YWx1ZSkge1xuICAgIHRoaXMuX2lzRG93bmxvYWRlZCA9ICEhdmFsdWU7XG4gIH1cbn1cblxuUGVyc2lzdGVudE9iamVjdC5yZWdpc3RlcihQaG90byk7XG4iXX0=
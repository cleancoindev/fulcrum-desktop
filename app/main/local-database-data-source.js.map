{"version":3,"sources":["../../src/main/local-database-data-source.js"],"names":["LocalDatabaseDataSource","constructor","account","db","choiceLists","classificationSets","forms","memberships","projects","roles","load","loadObjects","type","handler","objects","findAll","map","object","id","invalidate","collection","lazyLoad","callback","then","getProject","getChoiceList","getClassificationSet","getForm","getUser","_userID","getRole"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEe,MAAMA,uBAAN,CAA8B;AAC3CC,cAAYC,OAAZ,EAAqB;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,EAAL,GAAUD,QAAQC,EAAlB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,KAAL,GAAa,IAAb;AACD;;AAEKC,MAAN,CAAWP,EAAX,EAAe;AAAA;AACd;;AAEKQ,aAAN,CAAkBR,EAAlB,EAAsBS,IAAtB,EAA4BC,OAA5B,EAAqC;AAAA;AACnC,YAAMC,UAAU,MAAMF,KAAKG,OAAL,CAAaZ,EAAb,CAAtB;;AAEA,YAAMa,MAAM,EAAZ;;AAEA,WAAK,MAAMC,MAAX,IAAqBH,OAArB,EAA8B;AAC5B,YAAID,OAAJ,EAAa;AACXA,kBAAQG,GAAR,EAAaC,MAAb;AACD,SAFD,MAEO;AACLD,cAAIC,OAAOC,EAAX,IAAiBD,MAAjB;AACD;AACF;;AAED,aAAOD,GAAP;AAbmC;AAcpC;;AAEDG,aAAWC,UAAX,EAAuB;AACrB,SAAKA,UAAL,IAAmB,IAAnB;AACD;;AAEDC,WAASD,UAAT,EAAqBF,EAArB,EAAyBN,IAAzB,EAA+BC,OAA/B,EAAwCS,QAAxC,EAAkD;AAChD,QAAI,KAAKF,UAAL,KAAoB,IAAxB,EAA8B;AAC5B,WAAKT,WAAL,CAAiB,KAAKR,EAAtB,EAA0BS,IAA1B,EAAgCC,OAAhC,EAAyCU,IAAzC,CAA+CT,OAAD,IAAa;AACzD,aAAKM,UAAL,IAAmBN,OAAnB;AACAQ,iBAAS,IAAT,EAAe,KAAKF,UAAL,EAAiBF,EAAjB,CAAf;AACD,OAHD;;AAKA;AACD;;AAEDI,aAAS,IAAT,EAAe,KAAKF,UAAL,EAAiBF,EAAjB,CAAf;AACD;;AAEDM,aAAWN,EAAX,EAAeI,QAAf,EAAyB;AACvB,WAAO,KAAKD,QAAL,CAAc,UAAd,EAA0BH,EAA1B,qBAAuC,IAAvC,EAA6CI,QAA7C,CAAP;AACD;;AAEDG,gBAAcP,EAAd,EAAkBI,QAAlB,EAA4B;AAC1B,WAAO,KAAKD,QAAL,CAAc,aAAd,EAA6BH,EAA7B,wBAA6C,IAA7C,EAAmDI,QAAnD,CAAP;AACD;;AAEDI,uBAAqBR,EAArB,EAAyBI,QAAzB,EAAmC;AACjC,WAAO,KAAKD,QAAL,CAAc,oBAAd,EAAoCH,EAApC,+BAA2D,IAA3D,EAAiEI,QAAjE,CAAP;AACD;;AAEDK,UAAQT,EAAR,EAAYI,QAAZ,EAAsB;AACpB,WAAO,KAAKD,QAAL,CAAc,OAAd,EAAuBH,EAAvB,kBAAiC,IAAjC,EAAuCI,QAAvC,CAAP;AACD;;AAEDM,UAAQV,EAAR,EAAYI,QAAZ,EAAsB;AACpB,WAAO,KAAKD,QAAL,CAAc,aAAd,EAA6BH,EAA7B,wBAA6C,CAACF,GAAD,EAAMC,MAAN,KAAiB;AACnED,UAAIC,OAAOY,OAAX,IAAsBZ,MAAtB;AACD,KAFM,EAEJK,QAFI,CAAP;AAGD;;AAEDQ,UAAQZ,EAAR,EAAYI,QAAZ,EAAsB;AACpB,WAAO,KAAKD,QAAL,CAAc,OAAd,EAAuBH,EAAvB,kBAAiC,IAAjC,EAAuCI,QAAvC,CAAP;AACD;AAxE0C;kBAAxBtB,uB","file":"local-database-data-source.js","sourcesContent":["import Form from './models/form';\nimport ChoiceList from './models/choice-list';\nimport ClassificationSet from './models/classification-set';\nimport Membership from './models/membership';\nimport Role from './models/role';\nimport Project from './models/project';\n\nexport default class LocalDatabaseDataSource {\n  constructor(account) {\n    this.account = account;\n    this.db = account.db;\n    this.choiceLists = null;\n    this.classificationSets = null;\n    this.forms = null;\n    this.memberships = null;\n    this.projects = null;\n    this.roles = null;\n  }\n\n  async load(db) {\n  }\n\n  async loadObjects(db, type, handler) {\n    const objects = await type.findAll(db);\n\n    const map = {};\n\n    for (const object of objects) {\n      if (handler) {\n        handler(map, object);\n      } else {\n        map[object.id] = object;\n      }\n    }\n\n    return map;\n  }\n\n  invalidate(collection) {\n    this[collection] = null;\n  }\n\n  lazyLoad(collection, id, type, handler, callback) {\n    if (this[collection] == null) {\n      this.loadObjects(this.db, type, handler).then((objects) => {\n        this[collection] = objects;\n        callback(null, this[collection][id]);\n      });\n\n      return;\n    }\n\n    callback(null, this[collection][id]);\n  }\n\n  getProject(id, callback) {\n    return this.lazyLoad('projects', id, Project, null, callback);\n  }\n\n  getChoiceList(id, callback) {\n    return this.lazyLoad('choiceLists', id, ChoiceList, null, callback);\n  }\n\n  getClassificationSet(id, callback) {\n    return this.lazyLoad('classificationSets', id, ClassificationSet, null, callback);\n  }\n\n  getForm(id, callback) {\n    return this.lazyLoad('forms', id, Form, null, callback);\n  }\n\n  getUser(id, callback) {\n    return this.lazyLoad('memberships', id, Membership, (map, object) => {\n      map[object._userID] = object;\n    }, callback);\n  }\n\n  getRole(id, callback) {\n    return this.lazyLoad('roles', id, Role, null, callback);\n  }\n}\n\n"]}
{"version":3,"sources":["../../../src/main/commands/cli.js"],"names":["$0","require","install","COMMANDS","CLI","wrapAsync","obj","resolve","reject","__command","command","bind","args","handler","result","then","catch","setup","app","_yargs","env","debugsql","debug","initialize","destroy","dispose","run","cli","yargs","usage","promiseResolve","promiseReject","completion","Promise","CommandClass","commandCli","task","plugin","_plugins","pluginCommand","argv","demandCommand","version","fulcrum","help","db","fetchAccount","name","where","organization_name","accounts","findAll","createDataSource","account","dataSource","localDatabase","add","load","start","process","on","exit","err","console","error","stack"],"mappings":"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","file":"cli.js","sourcesContent":["import 'colors';\nimport yargs from 'yargs';\nimport Account from '../models/account';\nimport { DataSource } from 'fulcrum-core';\nimport LocalDatabaseDataSource from '../local-database-data-source';\nimport app from '../app';\n\nimport Setup from './setup';\nimport InstallPlugin from './install-plugin';\nimport CreatePlugin from './create-plugin';\nimport UpdatePlugins from './update-plugins';\nimport BuildPlugins from './build-plugins';\nimport WatchPlugins from './watch-plugins';\nimport Sync from './sync';\nimport Query from './query';\nimport version from '../../version';\n\nimport { Database } from 'minidb';\n\nyargs.$0 = 'fulcrum';\n\nrequire('source-map-support').install();\n\nconst COMMANDS = [\n  Setup,\n  Sync,\n  InstallPlugin,\n  CreatePlugin,\n  UpdatePlugins,\n  BuildPlugins,\n  WatchPlugins,\n  Query\n];\n\nexport default class CLI {\n  async setup() {\n    this.app = app;\n\n    this._yargs = yargs.env('FULCRUM');\n\n    if (this.args.debugsql) {\n      Database.debug = true;\n    }\n\n    await this.app.initialize();\n  }\n\n  async destroy() {\n    await this.app.dispose();\n  }\n\n  async run() {\n    let cli = this.yargs.usage('Usage: fulcrum <cmd> [args]');\n\n    cli.$0 = 'fulcrum';\n\n    // this is some hacks to coordinate the yargs handler function with this async function.\n    // if yargs adds support for promises in the command handlers this can go away.\n    let promiseResolve = null;\n    let promiseReject = null;\n\n    const completion = new Promise((resolve, reject) => {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    // cli = await this.addDefault(this.wrapAsync(cli, promiseResolve, promiseReject));\n\n    for (const CommandClass of COMMANDS) {\n      const command = new CommandClass();\n\n      command.app = this.app;\n\n      const commandCli = await command.task(this.wrapAsync(cli, promiseResolve, promiseReject));\n\n      if (commandCli) {\n        cli = commandCli;\n      }\n    }\n\n    for (const plugin of this.app._plugins) {\n      if (plugin.task) {\n        const pluginCommand = await plugin.task(this.wrapAsync(cli, promiseResolve, promiseReject));\n\n        if (pluginCommand) {\n          cli = pluginCommand;\n        }\n      }\n    }\n\n    this.argv =\n      cli.demandCommand()\n         .version(version.fulcrum)\n         .help()\n         .argv;\n\n    await completion;\n  }\n\n  // addDefault = async (cli) => {\n  //   return cli.command({\n  //     command: 'yoyo',\n  //     desc: 'yyo',\n  //     builder: {},\n  //     handler: this.runDefaultCommand\n  //   });\n  // }\n\n  // runDefaultCommand = async () => {\n  // }\n\n  get db() {\n    return this.app.db;\n  }\n\n  get yargs() {\n    return this._yargs;\n  }\n\n  get args() {\n    return yargs.argv;\n  }\n\n  async fetchAccount(name) {\n    const where = {};\n\n    if (name) {\n      where.organization_name = name;\n    }\n\n    const accounts = await Account.findAll(this.db, where);\n\n    return accounts;\n  }\n\n  async createDataSource(account) {\n    let dataSource = new DataSource();\n\n    const localDatabase = new LocalDatabaseDataSource(account);\n\n    dataSource.add(localDatabase);\n\n    await localDatabase.load(this.db);\n\n    return dataSource;\n  }\n\n  async start() {\n    // TODO(zhm) required or it hangs for ~30sec https://github.com/electron/electron/issues/4944\n    process.on('SIGINT', function() {\n      process.exit();\n    });\n\n    try {\n      await this.setup();\n      await this.run();\n      await this.destroy();\n    } catch (err) {\n      console.error(err.stack);\n      await this.destroy();\n    }\n\n    // TODO(zhm) required or it hangs for ~30sec https://github.com/electron/electron/issues/4944\n    process.exit();\n  }\n\n  // this hacks the yargs command handler to allow it to return a promise (async function)\n  wrapAsync = (obj, resolve, reject) => {\n    const __command = obj.command.bind(obj);\n\n    obj.command = (...args) => {\n      if (args && args[0] && args[0].handler) {\n        const handler = args[0].handler;\n\n        args[0].handler = () => {\n          const result = handler();\n\n          if (result && result.then) {\n            result.then(resolve).catch(reject);\n          }\n        };\n      }\n\n      return __command(...args);\n    };\n\n    return obj;\n  }\n}\n\nnew CLI().start().then(() => {\n}).catch((err) => {\n  console.error(err);\n});\n"]}
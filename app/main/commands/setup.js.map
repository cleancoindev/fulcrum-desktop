{"version":3,"sources":["../../../src/main/commands/setup.js"],"names":["prompt","questions","type","name","message","againQuestion","runCommand","exit","fulcrum","args","email","password","setupAccount","answers","success","retry","again","results","authenticate","response","body","statusCode","console","log","green","user","JSON","parse","context","contexts","contextAttributes","user_resource_id","id","organization_resource_id","db","account","findOrCreate","_organizationName","_firstName","first_name","_lastName","last_name","_email","_token","api_token","save","red","task","cli","command","desc","builder","handler"],"mappings":"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","file":"setup.js","sourcesContent":["import 'colors';\nimport inquirer from 'inquirer';\nimport Account from '../models/account';\nimport Client from '../api/client';\n\nfunction prompt(questions) {\n  return inquirer.prompt(questions);\n}\n\nconst questions = [\n  {\n    type: 'input',\n    name: 'email',\n    message: 'Enter your Fulcrum email address'\n  }, {\n    type: 'password',\n    message: 'Enter your Fulcrum password',\n    name: 'password'\n  }\n];\n\nconst againQuestion = {\n  type: 'confirm',\n  name: 'again',\n  message: 'Try again? (just hit enter for YES)',\n  'default': true\n};\n\nexport default class {\n  async task(cli) {\n    return cli.command({\n      command: 'setup',\n      desc: 'setup the local fulcrum database',\n      builder: {},\n      handler: this.runCommand\n    });\n  }\n\n  runCommand = async () => {\n    let exit = false;\n\n    while (!exit) {\n      if (fulcrum.args.email && fulcrum.args.password) {\n        await this.setupAccount(fulcrum.args.email, fulcrum.args.password)\n        return;\n      }\n\n      const answers = await prompt(questions);\n\n      const success = await this.setupAccount(answers.email, answers.password);\n\n      if (success) {\n        exit = true;\n      } else {\n        let retry = await prompt(againQuestion);\n\n        if (!retry.again) {\n          exit = true;\n        }\n      }\n    }\n  }\n\n  setupAccount = async (email, password) => {\n    const results = await Client.authenticate(email, password);\n    const response = results;\n    const body = results.body;\n\n    if (response.statusCode === 200) {\n      console.log(('Successfully authenticated with ' + email).green);\n\n      const user = JSON.parse(body).user;\n\n      for (let context of user.contexts) {\n        const contextAttributes = {\n          user_resource_id: user.id,\n          organization_resource_id: context.id\n        };\n\n        const db = fulcrum.db;\n\n        const account = await Account.findOrCreate(db, contextAttributes);\n\n        account._organizationName = context.name;\n        account._firstName = user.first_name;\n        account._lastName = user.last_name;\n        account._email = user.email;\n        account._token = context.api_token;\n\n        await account.save();\n\n        console.log('âœ“'.green, context.name);\n      }\n\n      return true;\n    } else {\n      console.log('Username or password incorrect'.red);\n    }\n\n    return false;\n  }\n}\n"]}
{"version":3,"sources":["../../../src/main/commands/watch-plugins.js"],"names":["runCommand","pluginPaths","sync","join","fulcrum","dir","promises","pluginPath","pluginDir","resolve","indexOf","parts","split","sep","name","length","args","console","log","push","Promise","reject","child","cwd","env","stdout","on","data","process","write","green","toString","stderr","red","ex","error","all","task","cli","command","desc","builder","type","handler"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;;;kBAEe,MAAM;AAAA;AAAA,SAenBA,UAfmB,qBAeN,aAAY;AACvB,YAAMC,cAAc,eAAKC,IAAL,CAAU,eAAKC,IAAL,CAAUC,QAAQC,GAAR,CAAY,SAAZ,CAAV,EAAkC,GAAlC,CAAV,CAApB;;AAEA,YAAMC,WAAW,EAAjB;;AAEA,WAAK,MAAMC,UAAX,IAAyBN,WAAzB,EAAsC;AACpC,cAAMO,YAAY,eAAKC,OAAL,CAAaF,UAAb,CAAlB;;AAEA,YAAIC,UAAUE,OAAV,CAAkB,OAAlB,IAA6B,CAAC,CAAlC,EAAqC;AACnC;AACD;;AAED,cAAMC,QAAQJ,WAAWK,KAAX,CAAiB,eAAKC,GAAtB,CAAd;AACA,cAAMC,OAAOH,MAAMA,MAAMI,MAAN,GAAe,CAArB,CAAb;;AAEA,YAAIX,QAAQY,IAAR,CAAaF,IAAb,IAAqBA,SAASV,QAAQY,IAAR,CAAaF,IAA/C,EAAqD;AACnD;AACD;;AAEDG,gBAAQC,GAAR,CAAY,oBAAZ,EAAkCX,UAAlC;;AAEAD,iBAASa,IAAT,CAAc,IAAIC,OAAJ,CAAY,UAACX,OAAD,EAAUY,MAAV,EAAqB;AAC7C,cAAI;AACF,kBAAMC,QAAQ,yBAAK,YAAL,EAAmB,EAACC,KAAKf,SAAN,EAAiBgB,wBAAjB,EAAnB,CAAd;;AAEAF,kBAAMG,MAAN,CAAaC,EAAb,CAAgB,MAAhB,EAAwB,UAACC,IAAD,EAAU;AAChCC,sBAAQH,MAAR,CAAeI,KAAf,CAAqBf,KAAKgB,KAAL,GAAa,GAAb,GAAmBH,KAAKI,QAAL,EAAxC;AACD,aAFD;;AAIAT,kBAAMU,MAAN,CAAaN,EAAb,CAAgB,MAAhB,EAAwB,UAACC,IAAD,EAAU;AAChCC,sBAAQI,MAAR,CAAeH,KAAf,CAAqBf,KAAKmB,GAAL,GAAW,GAAX,GAAiBN,KAAKI,QAAL,EAAtC;AACD,aAFD;;AAIAT,kBAAMI,EAAN,CAAS,MAAT,EAAiB,YAAW;AAC1BT,sBAAQC,GAAR,CAAYJ,KAAKgB,KAAjB,EAAwB,OAAxB;AACArB;AACD,aAHD;;AAKAQ,oBAAQC,GAAR,CAAY,iBAAZ;AACD,WAjBD,CAiBE,OAAOgB,EAAP,EAAW;AACXjB,oBAAQkB,KAAR,CAAc,uBAAd,EAAuC5B,UAAvC,EAAmD2B,EAAnD;AACD;AACF,SArBa,CAAd;AAsBD;;AAED,YAAMd,QAAQgB,GAAR,CAAY9B,QAAZ,CAAN;AACD,KA7DkB;AAAA;;AACb+B,MAAN,CAAWC,GAAX,EAAgB;AAAA;;AAAA;AACd,aAAOA,IAAIC,OAAJ,CAAY;AACjBA,iBAAS,eADQ;AAEjBC,cAAM,iCAFW;AAGjBC,iBAAS;AACP3B,gBAAM;AACJ0B,kBAAM,sBADF;AAEJE,kBAAM;AAFF;AADC,SAHQ;AASjBC,iBAAS,MAAK3C;AATG,OAAZ,CAAP;AADc;AAYf;;AAbkB,C","file":"watch-plugins.js","sourcesContent":["import path from 'path';\nimport { spawn, exec } from 'child_process';\nimport glob from 'glob';\nimport pluginEnv from '../plugin-env';\n\nexport default class {\n  async task(cli) {\n    return cli.command({\n      command: 'watch-plugins',\n      desc: 'watch and recompile all plugins',\n      builder: {\n        name: {\n          desc: 'plugin name to watch',\n          type: 'string'\n        }\n      },\n      handler: this.runCommand\n    });\n  }\n\n  runCommand = async () => {\n    const pluginPaths = glob.sync(path.join(fulcrum.dir('plugins'), '*'));\n\n    const promises = [];\n\n    for (const pluginPath of pluginPaths) {\n      const pluginDir = path.resolve(pluginPath);\n\n      if (pluginDir.indexOf('hello') > -1) {\n        continue;\n      }\n\n      const parts = pluginPath.split(path.sep);\n      const name = parts[parts.length - 1];\n\n      if (fulcrum.args.name && name !== fulcrum.args.name) {\n        continue;\n      }\n\n      console.log('Watching plugin...', pluginPath);\n\n      promises.push(new Promise((resolve, reject) => {\n        try {\n          const child = exec('yarn watch', {cwd: pluginDir, env: pluginEnv});\n\n          child.stdout.on('data', (data) => {\n            process.stdout.write(name.green + ' ' + data.toString());\n          });\n\n          child.stderr.on('data', (data) => {\n            process.stderr.write(name.red + ' ' + data.toString());\n          });\n\n          child.on('exit', function() {\n            console.log(name.green, 'Done!');\n            resolve();\n          });\n\n          console.log('Watching...\\n\\n');\n        } catch (ex) {\n          console.error('Error watching plugin', pluginPath, ex);\n        }\n      }));\n    }\n\n    await Promise.all(promises);\n  }\n}\n"]}
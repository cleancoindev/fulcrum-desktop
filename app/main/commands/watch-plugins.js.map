{"version":3,"sources":["../../../src/main/commands/watch-plugins.js"],"names":["ELECTRON_VERSION","runCommand","pluginPaths","sync","join","fulcrum","dir","promises","pluginPath","pluginDir","resolve","indexOf","env","process","npm_config_target","npm_config_arch","arch","npm_config_target_arch","npm_config_disturl","npm_config_runtime","npm_config_build_from_source","parts","split","sep","name","length","console","log","args","push","Promise","reject","child","cwd","stdout","on","data","write","green","toString","stderr","red","ex","error","all","task","cli","command","desc","builder","type","handler"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;;;;;AAEA,MAAMA,mBAAmB,OAAzB;;kBAEe,MAAM;AAAA;AAAA,SAenBC,UAfmB,qBAeN,aAAY;AACvB,YAAMC,cAAc,eAAKC,IAAL,CAAU,eAAKC,IAAL,CAAUC,QAAQC,GAAR,CAAY,SAAZ,CAAV,EAAkC,GAAlC,CAAV,CAApB;;AAEA,YAAMC,WAAW,EAAjB;;AAEA,WAAK,MAAMC,UAAX,IAAyBN,WAAzB,EAAsC;AACpC,cAAMO,YAAY,eAAKC,OAAL,CAAaF,UAAb,CAAlB;;AAEA,YAAIC,UAAUE,OAAV,CAAkB,OAAlB,IAA6B,CAAC,CAAlC,EAAqC;AACnC;AACD;;AAED,cAAMC,mBACDC,QAAQD,GADP;AAEJE,6BAAmBd,gBAFf;AAGJe,2BAAiBF,QAAQG,IAHrB;AAIJC,kCAAwBJ,QAAQG,IAJ5B;AAKJE,8BAAoB,mCALhB;AAMJC,8BAAoB,UANhB;AAOJC,wCAA8B;AAP1B,UAAN;;AAUA,cAAMC,QAAQb,WAAWc,KAAX,CAAiB,eAAKC,GAAtB,CAAd;AACA,cAAMC,OAAOH,MAAMA,MAAMI,MAAN,GAAe,CAArB,CAAb;;AAEAC,gBAAQC,GAAR,CAAYH,IAAZ;AACA,YAAInB,QAAQuB,IAAR,CAAaJ,IAAb,IAAqBA,SAASnB,QAAQuB,IAAR,CAAaJ,IAA/C,EAAqD;AACnD;AACD;;AAEDE,gBAAQC,GAAR,CAAY,oBAAZ,EAAkCnB,UAAlC;;AAEAD,iBAASsB,IAAT,CAAc,IAAIC,OAAJ,CAAY,UAACpB,OAAD,EAAUqB,MAAV,EAAqB;AAC7C,cAAI;AACF,kBAAMC,QAAQ,yBAAK,YAAL,EAAmB,EAACC,KAAKxB,SAAN,EAAiBG,GAAjB,EAAnB,CAAd;;AAEAoB,kBAAME,MAAN,CAAaC,EAAb,CAAgB,MAAhB,EAAwB,UAACC,IAAD,EAAU;AAChCvB,sBAAQqB,MAAR,CAAeG,KAAf,CAAqBb,KAAKc,KAAL,GAAa,GAAb,GAAmBF,KAAKG,QAAL,EAAxC;AACD,aAFD;;AAIAP,kBAAMQ,MAAN,CAAaL,EAAb,CAAgB,MAAhB,EAAwB,UAACC,IAAD,EAAU;AAChCvB,sBAAQ2B,MAAR,CAAeH,KAAf,CAAqBb,KAAKiB,GAAL,GAAW,GAAX,GAAiBL,KAAKG,QAAL,EAAtC;AACD,aAFD;;AAIAP,kBAAMG,EAAN,CAAS,MAAT,EAAiB,YAAW;AAC1BT,sBAAQC,GAAR,CAAYH,KAAKc,KAAjB,EAAwB,OAAxB;AACA5B;AACD,aAHD;;AAKAgB,oBAAQC,GAAR,CAAY,iBAAZ;AACD,WAjBD,CAiBE,OAAOe,EAAP,EAAW;AACXhB,oBAAQiB,KAAR,CAAc,uBAAd,EAAuCnC,UAAvC,EAAmDkC,EAAnD;AACD;AACF,SArBa,CAAd;AAsBD;;AAED,YAAMZ,QAAQc,GAAR,CAAYrC,QAAZ,CAAN;AACD,KAxEkB;AAAA;;AACbsC,MAAN,CAAWC,GAAX,EAAgB;AAAA;;AAAA;AACd,aAAOA,IAAIC,OAAJ,CAAY;AACjBA,iBAAS,eADQ;AAEjBC,cAAM,iCAFW;AAGjBC,iBAAS;AACPzB,gBAAM;AACJwB,kBAAM,sBADF;AAEJE,kBAAM;AAFF;AADC,SAHQ;AASjBC,iBAAS,MAAKlD;AATG,OAAZ,CAAP;AADc;AAYf;;AAbkB,C","file":"watch-plugins.js","sourcesContent":["import path from 'path';\nimport { spawn, exec } from 'child_process';\nimport glob from 'glob';\n\nconst ELECTRON_VERSION = '1.6.6';\n\nexport default class {\n  async task(cli) {\n    return cli.command({\n      command: 'watch-plugins',\n      desc: 'watch and recompile all plugins',\n      builder: {\n        name: {\n          desc: 'plugin name to watch',\n          type: 'string'\n        }\n      },\n      handler: this.runCommand\n    });\n  }\n\n  runCommand = async () => {\n    const pluginPaths = glob.sync(path.join(fulcrum.dir('plugins'), '*'));\n\n    const promises = [];\n\n    for (const pluginPath of pluginPaths) {\n      const pluginDir = path.resolve(pluginPath);\n\n      if (pluginDir.indexOf('hello') > -1) {\n        continue;\n      }\n\n      const env = {\n        ...process.env,\n        npm_config_target: ELECTRON_VERSION,\n        npm_config_arch: process.arch,\n        npm_config_target_arch: process.arch,\n        npm_config_disturl: 'https://atom.io/download/electron',\n        npm_config_runtime: 'electron',\n        npm_config_build_from_source: 'true'\n      };\n\n      const parts = pluginPath.split(path.sep);\n      const name = parts[parts.length - 1];\n\n      console.log(name);\n      if (fulcrum.args.name && name !== fulcrum.args.name) {\n        continue;\n      }\n\n      console.log('Watching plugin...', pluginPath);\n\n      promises.push(new Promise((resolve, reject) => {\n        try {\n          const child = exec('yarn watch', {cwd: pluginDir, env});\n\n          child.stdout.on('data', (data) => {\n            process.stdout.write(name.green + ' ' + data.toString());\n          });\n\n          child.stderr.on('data', (data) => {\n            process.stderr.write(name.red + ' ' + data.toString());\n          });\n\n          child.on('exit', function() {\n            console.log(name.green, 'Done!');\n            resolve();\n          });\n\n          console.log('Watching...\\n\\n');\n        } catch (ex) {\n          console.error('Error watching plugin', pluginPath, ex);\n        }\n      }));\n    }\n\n    await Promise.all(promises);\n  }\n}\n"]}
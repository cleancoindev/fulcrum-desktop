{"version":3,"sources":["../../../src/main/commands/sync.js"],"names":["runCommand","app","activatePlugins","account","fulcrum","fetchAccount","args","org","syncLoop","full","task","cli","command","desc","builder","required","type","forever","default","describe","handler","fullSync","sync","dataSource","createDataSource","synchronizer","run","form","Promise","resolve","setTimeout"],"mappings":";;;;;;AAAA;;;;;;;;kBAEe,MAAM;AAAA;AAAA;;AAAA,SAqBnBA,UArBmB,qBAqBN,aAAY;AACvB,YAAM,MAAKC,GAAL,CAASC,eAAT,EAAN;;AAEA,YAAMC,UAAU,MAAMC,QAAQC,YAAR,CAAqBD,QAAQE,IAAR,CAAaC,GAAlC,CAAtB;;AAEA,YAAM,MAAKC,QAAL,CAAcL,OAAd,EAAuBC,QAAQE,IAAR,CAAaG,IAApC,CAAN;AACD,KA3BkB;AAAA;;AACbC,MAAN,CAAWC,GAAX,EAAgB;AAAA;;AAAA;AACd,aAAOA,IAAIC,OAAJ,CAAY;AACjBA,iBAAS,MADQ;AAEjBC,cAAM,sBAFW;AAGjBC,iBAAS;AACPP,eAAK;AACHM,kBAAM,mBADH;AAEHE,sBAAU,IAFP;AAGHC,kBAAM;AAHH,WADE;AAMPC,mBAAS;AACPC,qBAAS,KADF;AAEPF,kBAAM,SAFC;AAGPG,sBAAU;AAHH;AANF,SAHQ;AAejBC,iBAAS,OAAKpB;AAfG,OAAZ,CAAP;AADc;AAkBf;;AAUKQ,UAAN,CAAeL,OAAf,EAAwBkB,QAAxB,EAAkC;AAAA;AAChC,YAAMC,OAAO,IAAb;;AAEA,YAAMC,aAAa,MAAMnB,QAAQoB,gBAAR,CAAyBrB,OAAzB,CAAzB;;AAEA,aAAOmB,IAAP,EAAa;AACX,cAAMG,eAAe,4BAArB;;AAEA,cAAMA,aAAaC,GAAb,CAAiBvB,OAAjB,EAA0BC,QAAQE,IAAR,CAAaqB,IAAvC,EAA6CJ,UAA7C,EAAyD,EAACF,QAAD,EAAzD,CAAN;;AAEAA,mBAAW,KAAX;;AAEA,cAAM,IAAIO,OAAJ,CAAY,UAACC,OAAD;AAAA,iBAAaC,WAAWD,OAAX,EAAoB,KAApB,CAAb;AAAA,SAAZ,CAAN;AACD;AAb+B;AAcjC;AA3CkB,C","file":"sync.js","sourcesContent":["import Synchronizer from '../sync/synchronizer';\n\nexport default class {\n  async task(cli) {\n    return cli.command({\n      command: 'sync',\n      desc: 'sync an organization',\n      builder: {\n        org: {\n          desc: 'organization name',\n          required: true,\n          type: 'string'\n        },\n        forever: {\n          default: false,\n          type: 'boolean',\n          describe: 'keep the sync running forever'\n        }\n      },\n      handler: this.runCommand\n    });\n  }\n\n  runCommand = async () => {\n    await this.app.activatePlugins();\n\n    const account = await fulcrum.fetchAccount(fulcrum.args.org);\n\n    await this.syncLoop(account, fulcrum.args.full);\n  }\n\n  async syncLoop(account, fullSync) {\n    const sync = true;\n\n    const dataSource = await fulcrum.createDataSource(account);\n\n    while (sync) {\n      const synchronizer = new Synchronizer();\n\n      await synchronizer.run(account, fulcrum.args.form, dataSource, {fullSync});\n\n      fullSync = false;\n\n      await new Promise((resolve) => setTimeout(resolve, 10000));\n    }\n  }\n}\n"]}
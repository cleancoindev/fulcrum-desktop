'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _recordValues = require('./record-values');

var _recordValues2 = _interopRequireDefault(_recordValues);

var _pgFormat = require('pg-format');

var _pgFormat2 = _interopRequireDefault(_pgFormat);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class PostgresRecordValues extends _recordValues2.default {
  static setupSearch(values, feature, options) {
    const searchableValue = feature.searchableValue;

    if (options.disableComplexTypes) {
      values.record_index_text = searchableValue;

      const strings = (0, _lodash.compact)(feature.formValues.all.map(o => o.searchableValue && o.searchableValue.trim()));

      values.record_index = JSON.stringify(strings);

      return values;
    }

    values.record_index_text = searchableValue;
    values.record_index = { raw: `to_tsvector('simple', ${(0, _pgFormat2.default)('%L', searchableValue)})` };

    return values;
  }

  static setupPoint(values, latitude, longitude, options) {
    if (options.disableComplexTypes) {
      return JSON.stringify({
        type: 'Point',
        coordinates: [longitude, latitude]
      });
    }

    const wkt = (0, _pgFormat2.default)('POINT(%s %s)', longitude, latitude);

    return { raw: `ST_Force2D(ST_SetSRID(ST_GeomFromText('${wkt}'), 4326))` };
  }
}
exports.default = PostgresRecordValues;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tYWluL21vZGVscy9yZWNvcmQtdmFsdWVzL3Bvc3RncmVzLXJlY29yZC12YWx1ZXMuanMiXSwibmFtZXMiOlsiUG9zdGdyZXNSZWNvcmRWYWx1ZXMiLCJzZXR1cFNlYXJjaCIsInZhbHVlcyIsImZlYXR1cmUiLCJvcHRpb25zIiwic2VhcmNoYWJsZVZhbHVlIiwiZGlzYWJsZUNvbXBsZXhUeXBlcyIsInJlY29yZF9pbmRleF90ZXh0Iiwic3RyaW5ncyIsImZvcm1WYWx1ZXMiLCJhbGwiLCJtYXAiLCJvIiwidHJpbSIsInJlY29yZF9pbmRleCIsIkpTT04iLCJzdHJpbmdpZnkiLCJyYXciLCJzZXR1cFBvaW50IiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJ0eXBlIiwiY29vcmRpbmF0ZXMiLCJ3a3QiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVlLE1BQU1BLG9CQUFOLGdDQUFnRDtBQUM3RCxTQUFPQyxXQUFQLENBQW1CQyxNQUFuQixFQUEyQkMsT0FBM0IsRUFBb0NDLE9BQXBDLEVBQTZDO0FBQzNDLFVBQU1DLGtCQUFrQkYsUUFBUUUsZUFBaEM7O0FBRUEsUUFBSUQsUUFBUUUsbUJBQVosRUFBaUM7QUFDL0JKLGFBQU9LLGlCQUFQLEdBQTJCRixlQUEzQjs7QUFFQSxZQUFNRyxVQUFVLHFCQUFRTCxRQUFRTSxVQUFSLENBQW1CQyxHQUFuQixDQUF1QkMsR0FBdkIsQ0FBMkJDLEtBQUtBLEVBQUVQLGVBQUYsSUFBcUJPLEVBQUVQLGVBQUYsQ0FBa0JRLElBQWxCLEVBQXJELENBQVIsQ0FBaEI7O0FBRUFYLGFBQU9ZLFlBQVAsR0FBc0JDLEtBQUtDLFNBQUwsQ0FBZVIsT0FBZixDQUF0Qjs7QUFFQSxhQUFPTixNQUFQO0FBQ0Q7O0FBRURBLFdBQU9LLGlCQUFQLEdBQTJCRixlQUEzQjtBQUNBSCxXQUFPWSxZQUFQLEdBQXNCLEVBQUNHLEtBQU0seUJBQXlCLHdCQUFTLElBQVQsRUFBZVosZUFBZixDQUFpQyxHQUFqRSxFQUF0Qjs7QUFFQSxXQUFPSCxNQUFQO0FBQ0Q7O0FBRUQsU0FBT2dCLFVBQVAsQ0FBa0JoQixNQUFsQixFQUEwQmlCLFFBQTFCLEVBQW9DQyxTQUFwQyxFQUErQ2hCLE9BQS9DLEVBQXdEO0FBQ3RELFFBQUlBLFFBQVFFLG1CQUFaLEVBQWlDO0FBQy9CLGFBQU9TLEtBQUtDLFNBQUwsQ0FBZTtBQUNwQkssY0FBTSxPQURjO0FBRXBCQyxxQkFBYSxDQUFFRixTQUFGLEVBQWFELFFBQWI7QUFGTyxPQUFmLENBQVA7QUFJRDs7QUFFRCxVQUFNSSxNQUFNLHdCQUFTLGNBQVQsRUFBeUJILFNBQXpCLEVBQW9DRCxRQUFwQyxDQUFaOztBQUVBLFdBQU8sRUFBQ0YsS0FBTSwwQ0FBMENNLEdBQUssWUFBdEQsRUFBUDtBQUNEO0FBL0I0RDtrQkFBMUN2QixvQiIsImZpbGUiOiJwb3N0Z3Jlcy1yZWNvcmQtdmFsdWVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlY29yZFZhbHVlcyBmcm9tICcuL3JlY29yZC12YWx1ZXMnO1xuaW1wb3J0IHBnZm9ybWF0IGZyb20gJ3BnLWZvcm1hdCc7XG5pbXBvcnQgeyBjb21wYWN0IH0gZnJvbSAnbG9kYXNoJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdGdyZXNSZWNvcmRWYWx1ZXMgZXh0ZW5kcyBSZWNvcmRWYWx1ZXMge1xuICBzdGF0aWMgc2V0dXBTZWFyY2godmFsdWVzLCBmZWF0dXJlLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc2VhcmNoYWJsZVZhbHVlID0gZmVhdHVyZS5zZWFyY2hhYmxlVmFsdWU7XG5cbiAgICBpZiAob3B0aW9ucy5kaXNhYmxlQ29tcGxleFR5cGVzKSB7XG4gICAgICB2YWx1ZXMucmVjb3JkX2luZGV4X3RleHQgPSBzZWFyY2hhYmxlVmFsdWU7XG5cbiAgICAgIGNvbnN0IHN0cmluZ3MgPSBjb21wYWN0KGZlYXR1cmUuZm9ybVZhbHVlcy5hbGwubWFwKG8gPT4gby5zZWFyY2hhYmxlVmFsdWUgJiYgby5zZWFyY2hhYmxlVmFsdWUudHJpbSgpKSk7XG5cbiAgICAgIHZhbHVlcy5yZWNvcmRfaW5kZXggPSBKU09OLnN0cmluZ2lmeShzdHJpbmdzKTtcblxuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICB2YWx1ZXMucmVjb3JkX2luZGV4X3RleHQgPSBzZWFyY2hhYmxlVmFsdWU7XG4gICAgdmFsdWVzLnJlY29yZF9pbmRleCA9IHtyYXc6IGB0b190c3ZlY3Rvcignc2ltcGxlJywgJHsgcGdmb3JtYXQoJyVMJywgc2VhcmNoYWJsZVZhbHVlKSB9KWB9O1xuXG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuXG4gIHN0YXRpYyBzZXR1cFBvaW50KHZhbHVlcywgbGF0aXR1ZGUsIGxvbmdpdHVkZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmRpc2FibGVDb21wbGV4VHlwZXMpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBbIGxvbmdpdHVkZSwgbGF0aXR1ZGUgXVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgd2t0ID0gcGdmb3JtYXQoJ1BPSU5UKCVzICVzKScsIGxvbmdpdHVkZSwgbGF0aXR1ZGUpO1xuXG4gICAgcmV0dXJuIHtyYXc6IGBTVF9Gb3JjZTJEKFNUX1NldFNSSUQoU1RfR2VvbUZyb21UZXh0KCckeyB3a3QgfScpLCA0MzI2KSlgfTtcbiAgfVxufVxuIl19
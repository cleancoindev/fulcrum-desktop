'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _minidb = require('minidb');

var _fulcrumCore = require('fulcrum-core');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

class Changeset extends _fulcrumCore.Changeset {
  static get tableName() {
    return 'changesets';
  }

  static get columns() {
    return [{ name: 'accountRowID', column: 'account_id', type: 'integer', null: false }, { name: 'id', column: 'resource_id', type: 'string', null: false }, { name: 'formRowID', column: 'form_id', type: 'integer' }, { name: 'formID', column: 'form_resource_id', type: 'string' }, { name: 'metadata', column: 'metadata', type: 'json' }, { name: 'metadataIndexText', column: 'metadata_index_text', type: 'string' }, { name: 'closedAt', column: 'closed_at', type: 'datetime' }, { name: 'closedByRowID', column: 'closed_by_id', type: 'integer' }, { name: 'closedByID', column: 'closed_by_resource_id', type: 'string' }, { name: 'createdByRowID', column: 'created_by_id', type: 'integer' }, { name: 'createdByID', column: 'created_by_resource_id', type: 'string' }, { name: 'numberOfChanges', column: 'number_of_changes', type: 'integer' }, { name: 'numberOfCreates', column: 'number_of_creates', type: 'integer' }, { name: 'numberOfUpdates', column: 'number_of_updates', type: 'integer' }, { name: 'numberOfDeletes', column: 'number_of_deletes', type: 'integer' }, { name: 'minLat', column: 'min_lat', type: 'double' }, { name: 'maxLat', column: 'max_lat', type: 'double' }, { name: 'minLon', column: 'min_lon', type: 'double' }, { name: 'maxLon', column: 'max_lon', type: 'double' }, { name: 'createdAt', column: 'server_created_at', type: 'datetime' }, { name: 'updatedAt', column: 'server_updated_at', type: 'datetime' }];
  }

  beforeSave(options) {
    var _this = this;

    return _asyncToGenerator(function* () {
      _this._metadataIndexText = _this.metadataIndexText;
    })();
  }
}

exports.default = Changeset;
_minidb.PersistentObject.register(Changeset);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYWluL21vZGVscy9jaGFuZ2VzZXQuanMiXSwibmFtZXMiOlsiQ2hhbmdlc2V0IiwidGFibGVOYW1lIiwiY29sdW1ucyIsIm5hbWUiLCJjb2x1bW4iLCJ0eXBlIiwibnVsbCIsImJlZm9yZVNhdmUiLCJvcHRpb25zIiwiX21ldGFkYXRhSW5kZXhUZXh0IiwibWV0YWRhdGFJbmRleFRleHQiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFZSxNQUFNQSxTQUFOLGdDQUFzQztBQUNuRCxhQUFXQyxTQUFYLEdBQXVCO0FBQ3JCLFdBQU8sWUFBUDtBQUNEOztBQUVELGFBQVdDLE9BQVgsR0FBcUI7QUFDbkIsV0FBTyxDQUNMLEVBQUVDLE1BQU0sY0FBUixFQUF3QkMsUUFBUSxZQUFoQyxFQUE4Q0MsTUFBTSxTQUFwRCxFQUErREMsTUFBTSxLQUFyRSxFQURLLEVBRUwsRUFBRUgsTUFBTSxJQUFSLEVBQWNDLFFBQVEsYUFBdEIsRUFBcUNDLE1BQU0sUUFBM0MsRUFBcURDLE1BQU0sS0FBM0QsRUFGSyxFQUdMLEVBQUVILE1BQU0sV0FBUixFQUFxQkMsUUFBUSxTQUE3QixFQUF3Q0MsTUFBTSxTQUE5QyxFQUhLLEVBSUwsRUFBRUYsTUFBTSxRQUFSLEVBQWtCQyxRQUFRLGtCQUExQixFQUE4Q0MsTUFBTSxRQUFwRCxFQUpLLEVBS0wsRUFBRUYsTUFBTSxVQUFSLEVBQW9CQyxRQUFRLFVBQTVCLEVBQXdDQyxNQUFNLE1BQTlDLEVBTEssRUFNTCxFQUFFRixNQUFNLG1CQUFSLEVBQTZCQyxRQUFRLHFCQUFyQyxFQUE0REMsTUFBTSxRQUFsRSxFQU5LLEVBT0wsRUFBRUYsTUFBTSxVQUFSLEVBQW9CQyxRQUFRLFdBQTVCLEVBQXlDQyxNQUFNLFVBQS9DLEVBUEssRUFRTCxFQUFFRixNQUFNLGVBQVIsRUFBeUJDLFFBQVEsY0FBakMsRUFBaURDLE1BQU0sU0FBdkQsRUFSSyxFQVNMLEVBQUVGLE1BQU0sWUFBUixFQUFzQkMsUUFBUSx1QkFBOUIsRUFBdURDLE1BQU0sUUFBN0QsRUFUSyxFQVVMLEVBQUVGLE1BQU0sZ0JBQVIsRUFBMEJDLFFBQVEsZUFBbEMsRUFBbURDLE1BQU0sU0FBekQsRUFWSyxFQVdMLEVBQUVGLE1BQU0sYUFBUixFQUF1QkMsUUFBUSx3QkFBL0IsRUFBeURDLE1BQU0sUUFBL0QsRUFYSyxFQVlMLEVBQUVGLE1BQU0saUJBQVIsRUFBMkJDLFFBQVEsbUJBQW5DLEVBQXdEQyxNQUFNLFNBQTlELEVBWkssRUFhTCxFQUFFRixNQUFNLGlCQUFSLEVBQTJCQyxRQUFRLG1CQUFuQyxFQUF3REMsTUFBTSxTQUE5RCxFQWJLLEVBY0wsRUFBRUYsTUFBTSxpQkFBUixFQUEyQkMsUUFBUSxtQkFBbkMsRUFBd0RDLE1BQU0sU0FBOUQsRUFkSyxFQWVMLEVBQUVGLE1BQU0saUJBQVIsRUFBMkJDLFFBQVEsbUJBQW5DLEVBQXdEQyxNQUFNLFNBQTlELEVBZkssRUFnQkwsRUFBRUYsTUFBTSxRQUFSLEVBQWtCQyxRQUFRLFNBQTFCLEVBQXFDQyxNQUFNLFFBQTNDLEVBaEJLLEVBaUJMLEVBQUVGLE1BQU0sUUFBUixFQUFrQkMsUUFBUSxTQUExQixFQUFxQ0MsTUFBTSxRQUEzQyxFQWpCSyxFQWtCTCxFQUFFRixNQUFNLFFBQVIsRUFBa0JDLFFBQVEsU0FBMUIsRUFBcUNDLE1BQU0sUUFBM0MsRUFsQkssRUFtQkwsRUFBRUYsTUFBTSxRQUFSLEVBQWtCQyxRQUFRLFNBQTFCLEVBQXFDQyxNQUFNLFFBQTNDLEVBbkJLLEVBb0JMLEVBQUVGLE1BQU0sV0FBUixFQUFxQkMsUUFBUSxtQkFBN0IsRUFBa0RDLE1BQU0sVUFBeEQsRUFwQkssRUFxQkwsRUFBRUYsTUFBTSxXQUFSLEVBQXFCQyxRQUFRLG1CQUE3QixFQUFrREMsTUFBTSxVQUF4RCxFQXJCSyxDQUFQO0FBdUJEOztBQUVLRSxZQUFOLENBQWlCQyxPQUFqQixFQUEwQjtBQUFBOztBQUFBO0FBQ3hCLFlBQUtDLGtCQUFMLEdBQTBCLE1BQUtDLGlCQUEvQjtBQUR3QjtBQUV6QjtBQWpDa0Q7O2tCQUFoQ1YsUztBQW9DckIseUJBQWlCVyxRQUFqQixDQUEwQlgsU0FBMUIiLCJmaWxlIjoiY2hhbmdlc2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGVyc2lzdGVudE9iamVjdCB9IGZyb20gJ21pbmlkYic7XG5pbXBvcnQgeyBDaGFuZ2VzZXQgYXMgQ2hhbmdlc2V0QmFzZSB9IGZyb20gJ2Z1bGNydW0tY29yZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYW5nZXNldCBleHRlbmRzIENoYW5nZXNldEJhc2Uge1xuICBzdGF0aWMgZ2V0IHRhYmxlTmFtZSgpIHtcbiAgICByZXR1cm4gJ2NoYW5nZXNldHMnO1xuICB9XG5cbiAgc3RhdGljIGdldCBjb2x1bW5zKCkge1xuICAgIHJldHVybiBbXG4gICAgICB7IG5hbWU6ICdhY2NvdW50Um93SUQnLCBjb2x1bW46ICdhY2NvdW50X2lkJywgdHlwZTogJ2ludGVnZXInLCBudWxsOiBmYWxzZSB9LFxuICAgICAgeyBuYW1lOiAnaWQnLCBjb2x1bW46ICdyZXNvdXJjZV9pZCcsIHR5cGU6ICdzdHJpbmcnLCBudWxsOiBmYWxzZSB9LFxuICAgICAgeyBuYW1lOiAnZm9ybVJvd0lEJywgY29sdW1uOiAnZm9ybV9pZCcsIHR5cGU6ICdpbnRlZ2VyJyB9LFxuICAgICAgeyBuYW1lOiAnZm9ybUlEJywgY29sdW1uOiAnZm9ybV9yZXNvdXJjZV9pZCcsIHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICB7IG5hbWU6ICdtZXRhZGF0YScsIGNvbHVtbjogJ21ldGFkYXRhJywgdHlwZTogJ2pzb24nIH0sXG4gICAgICB7IG5hbWU6ICdtZXRhZGF0YUluZGV4VGV4dCcsIGNvbHVtbjogJ21ldGFkYXRhX2luZGV4X3RleHQnLCB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgeyBuYW1lOiAnY2xvc2VkQXQnLCBjb2x1bW46ICdjbG9zZWRfYXQnLCB0eXBlOiAnZGF0ZXRpbWUnIH0sXG4gICAgICB7IG5hbWU6ICdjbG9zZWRCeVJvd0lEJywgY29sdW1uOiAnY2xvc2VkX2J5X2lkJywgdHlwZTogJ2ludGVnZXInIH0sXG4gICAgICB7IG5hbWU6ICdjbG9zZWRCeUlEJywgY29sdW1uOiAnY2xvc2VkX2J5X3Jlc291cmNlX2lkJywgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgIHsgbmFtZTogJ2NyZWF0ZWRCeVJvd0lEJywgY29sdW1uOiAnY3JlYXRlZF9ieV9pZCcsIHR5cGU6ICdpbnRlZ2VyJyB9LFxuICAgICAgeyBuYW1lOiAnY3JlYXRlZEJ5SUQnLCBjb2x1bW46ICdjcmVhdGVkX2J5X3Jlc291cmNlX2lkJywgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgIHsgbmFtZTogJ251bWJlck9mQ2hhbmdlcycsIGNvbHVtbjogJ251bWJlcl9vZl9jaGFuZ2VzJywgdHlwZTogJ2ludGVnZXInIH0sXG4gICAgICB7IG5hbWU6ICdudW1iZXJPZkNyZWF0ZXMnLCBjb2x1bW46ICdudW1iZXJfb2ZfY3JlYXRlcycsIHR5cGU6ICdpbnRlZ2VyJyB9LFxuICAgICAgeyBuYW1lOiAnbnVtYmVyT2ZVcGRhdGVzJywgY29sdW1uOiAnbnVtYmVyX29mX3VwZGF0ZXMnLCB0eXBlOiAnaW50ZWdlcicgfSxcbiAgICAgIHsgbmFtZTogJ251bWJlck9mRGVsZXRlcycsIGNvbHVtbjogJ251bWJlcl9vZl9kZWxldGVzJywgdHlwZTogJ2ludGVnZXInIH0sXG4gICAgICB7IG5hbWU6ICdtaW5MYXQnLCBjb2x1bW46ICdtaW5fbGF0JywgdHlwZTogJ2RvdWJsZScgfSxcbiAgICAgIHsgbmFtZTogJ21heExhdCcsIGNvbHVtbjogJ21heF9sYXQnLCB0eXBlOiAnZG91YmxlJyB9LFxuICAgICAgeyBuYW1lOiAnbWluTG9uJywgY29sdW1uOiAnbWluX2xvbicsIHR5cGU6ICdkb3VibGUnIH0sXG4gICAgICB7IG5hbWU6ICdtYXhMb24nLCBjb2x1bW46ICdtYXhfbG9uJywgdHlwZTogJ2RvdWJsZScgfSxcbiAgICAgIHsgbmFtZTogJ2NyZWF0ZWRBdCcsIGNvbHVtbjogJ3NlcnZlcl9jcmVhdGVkX2F0JywgdHlwZTogJ2RhdGV0aW1lJyB9LFxuICAgICAgeyBuYW1lOiAndXBkYXRlZEF0JywgY29sdW1uOiAnc2VydmVyX3VwZGF0ZWRfYXQnLCB0eXBlOiAnZGF0ZXRpbWUnIH1cbiAgICBdO1xuICB9XG5cbiAgYXN5bmMgYmVmb3JlU2F2ZShvcHRpb25zKSB7XG4gICAgdGhpcy5fbWV0YWRhdGFJbmRleFRleHQgPSB0aGlzLm1ldGFkYXRhSW5kZXhUZXh0O1xuICB9XG59XG5cblBlcnNpc3RlbnRPYmplY3QucmVnaXN0ZXIoQ2hhbmdlc2V0KTtcbiJdfQ==
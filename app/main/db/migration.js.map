{"version":3,"sources":["../../../src/main/db/migration.js"],"names":["readFile","promisify","Migration","constructor","db","versionName","executeMigrationSQL","suffix","dialect","fileName","data","encoding","sql","part","split","trim","length","substring","push","results","script","verbose","console","log","execute","executeUpgradeSQL","executeDowngradeSQL","up","down"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;AAEA,MAAMA,WAAW,mBAAQC,SAAR,CAAkB,aAAGD,QAArB,CAAjB;;AAEe,MAAME,SAAN,CAAgB;AAC7BC,cAAYC,EAAZ,EAAgBC,WAAhB,EAA6B;AAC3B,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACD;;AAEKC,qBAAN,CAA0BC,MAA1B,EAAkC;AAAA;;AAAA;AAChC,YAAMC,UAAU,MAAM,MAAKJ,EAAL,CAAQI,OAA9B;;AAEA,YAAMC,WAAW,iCAAiC,MAAKJ,WAAtC,GAAoD,GAApD,GAA0DE,MAA1D,GAAmEC,OAAnE,GAA6E,MAA9F;;AAEA,YAAME,OAAO,MAAMV,SAASS,QAAT,EAAmB,EAAEE,UAAU,MAAZ,EAAnB,CAAnB;;AAEA,YAAMC,MAAM,EAAZ;;AAEA,WAAK,IAAIC,IAAT,IAAiBH,KAAKI,KAAL,CAAW,MAAX,CAAjB,EAAqC;AACnC,YAAID,KAAKE,IAAL,GAAYC,MAAZ,IAAsBH,KAAKE,IAAL,GAAYE,SAAZ,CAAsB,CAAtB,EAAyB,CAAzB,MAAgC,IAA1D,EAAgE;AAC9DL,cAAIM,IAAJ,CAASL,KAAKE,IAAL,EAAT;AACD;AACF;;AAED,UAAIH,IAAII,MAAJ,KAAe,CAAnB,EAAsB;AACpB,eAAO,EAAP;AACD;;AAED,YAAMG,UAAU,EAAhB;;AAEA,WAAK,IAAIC,MAAT,IAAmBR,GAAnB,EAAwB;AACtB,YAAI,MAAKR,EAAL,CAAQiB,OAAZ,EAAqB;AACnBC,kBAAQC,GAAR,CAAYH,MAAZ,EAAoB,IAApB;AACD;;AAEDD,gBAAQD,IAAR,EAAa,MAAM,MAAKd,EAAL,CAAQoB,OAAR,CAAgBJ,MAAhB,CAAnB;AACD;;AAED,aAAOD,OAAP;AA7BgC;AA8BjC;;AAEKM,mBAAN,GAA0B;AAAA;;AAAA;AACxB,aAAO,MAAM,OAAKnB,mBAAL,CAAyB,IAAzB,CAAb;AADwB;AAEzB;;AAEKoB,qBAAN,GAA4B;AAAA;;AAAA;AAC1B,aAAO,MAAM,OAAKpB,mBAAL,CAAyB,MAAzB,CAAb;AAD0B;AAE3B;;AAEKqB,IAAN,GAAW;AAAA;;AAAA;AACT,aAAO,MAAM,OAAKF,iBAAL,EAAb;AADS;AAEV;;AAEKG,MAAN,GAAa;AAAA;;AAAA;AACX,aAAO,MAAM,OAAKF,mBAAL,EAAb;AADW;AAEZ;AApD4B;kBAAVxB,S","file":"migration.js","sourcesContent":["import fs from 'fs';\nimport Promise from 'bluebird';\n\nconst readFile = Promise.promisify(fs.readFile);\n\nexport default class Migration {\n  constructor(db, versionName) {\n    this.db = db;\n    this.versionName = versionName;\n  }\n\n  async executeMigrationSQL(suffix) {\n    const dialect = '.' + this.db.dialect;\n\n    const fileName = './src/db/migrations/version_' + this.versionName + '.' + suffix + dialect + '.sql';\n\n    const data = await readFile(fileName, { encoding: 'utf8' });\n\n    const sql = [];\n\n    for (let part of data.split('\\n\\n')) {\n      if (part.trim().length && part.trim().substring(0, 2) !== '--') {\n        sql.push(part.trim());\n      }\n    }\n\n    if (sql.length === 0) {\n      return [];\n    }\n\n    const results = [];\n\n    for (let script of sql) {\n      if (this.db.verbose) {\n        console.log(script, '\\n');\n      }\n\n      results.push(await this.db.execute(script));\n    }\n\n    return results;\n  }\n\n  async executeUpgradeSQL() {\n    return await this.executeMigrationSQL('up');\n  }\n\n  async executeDowngradeSQL() {\n    return await this.executeMigrationSQL('down');\n  }\n\n  async up() {\n    return await this.executeUpgradeSQL();\n  }\n\n  async down() {\n    return await this.executeDowngradeSQL();\n  }\n}\n"]}
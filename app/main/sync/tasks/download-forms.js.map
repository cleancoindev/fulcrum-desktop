{"version":3,"sources":["../../../../src/main/sync/tasks/download-forms.js"],"names":["SchemaDiffer","Sqlite","Postgres","DownloadForms","run","account","dataSource","sync","checkSyncState","needsUpdate","progress","message","downloading","response","getForms","objects","JSON","parse","body","forms","processing","count","total","length","localObjects","findForms","markDeletedObjects","index","attributes","object","findOrCreate","db","resource_id","id","account_id","rowID","oldForm","isPersisted","_id","row_id","name","_name","elements","_elementsJSON","isChanged","version","updateFromAPIAttributes","_deletedAt","save","newForm","execute","ident","statements","updateFormTables","trigger","form","update","source","invalidate","finished","oldSchema","newSchema","differ","generator","dialect","afterTransform","tablePrefix","generate","transaction","statement"],"mappings":"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","file":"download-forms.js","sourcesContent":["import Task from './task';\nimport Client from '../../api/client';\nimport Form from '../../models/form';\nimport {format} from 'util';\nimport SQLiteRecordValues from '../../models/record-values/sqlite-record-values';\n\nimport Schema from 'fulcrum-schema/dist/schema';\nimport sqldiff from 'sqldiff';\nimport V2 from 'fulcrum-schema/dist/schemas/postgres-query-v2';\n\nconst {SchemaDiffer, Sqlite, Postgres} = sqldiff;\n\nexport default class DownloadForms extends Task {\n  async run({account, dataSource}) {\n    const sync = await this.checkSyncState(account, 'forms');\n\n    if (!sync.needsUpdate) {\n      return;\n    }\n\n    this.progress({message: this.downloading + ' forms'});\n\n    const response = await Client.getForms(account);\n\n    const objects = JSON.parse(response.body).forms;\n\n    this.progress({message: this.processing + ' forms', count: 0, total: objects.length});\n\n    const localObjects = await account.findForms();\n\n    this.markDeletedObjects(localObjects, objects);\n\n    for (let index = 0; index < objects.length; ++index) {\n      const attributes = objects[index];\n\n      const object = await Form.findOrCreate(account.db, {resource_id: attributes.id, account_id: account.rowID});\n\n      let oldForm = null;\n\n      if (object.isPersisted) {\n        oldForm = {\n          id: object._id,\n          row_id: object.rowID,\n          name: object._name,\n          elements: object._elementsJSON\n        };\n      }\n\n      const isChanged = !object.isPersisted || attributes.version !== object.version;\n\n      object.updateFromAPIAttributes(attributes);\n      object._deletedAt = null;\n\n      await object.save();\n\n      const newForm = {row_id: object.rowID,\n                       name: object._name,\n                       elements: object._elementsJSON};\n\n      await account.db.execute(format('DROP VIEW IF EXISTS %s',\n                                      account.db.ident(object.name)));\n\n      const statements = await this.updateFormTables(account, oldForm, newForm);\n\n      // await account.db.execute(format('CREATE VIEW %s AS SELECT * FROM %s_view_full',\n      //                                 account.db.ident(object.name),\n      //                                 SQLiteRecordValues.tableNameWithForm(object)));\n\n      if (isChanged) {\n        await this.trigger('form:save', {form: object, account, statements, oldForm, newForm});\n      }\n\n      this.progress({message: this.processing + ' forms', count: index + 1, total: objects.length});\n    }\n\n    await sync.update();\n\n    dataSource.source.invalidate('forms');\n\n    this.progress({message: this.finished + ' forms', count: objects.length, total: objects.length});\n  }\n\n  async updateFormTables(account, oldForm, newForm) {\n    let oldSchema = null;\n    let newSchema = null;\n\n    if (oldForm) {\n      oldSchema = new Schema(oldForm, V2, null);\n    }\n\n    if (newForm) {\n      newSchema = new Schema(newForm, V2, null);\n    }\n\n    const differ = new SchemaDiffer(oldSchema, newSchema);\n\n    let generator = null;\n\n    if (account.db.dialect === 'sqlite') {\n      generator = new Sqlite(differ, {afterTransform: null});\n    } else if (account.db.dialect === 'postgresql') {\n      generator = new Postgres(differ, {afterTransform: null});\n    }\n\n    generator.tablePrefix = 'account_' + account.rowID + '_';\n\n    const statements = generator.generate();\n\n    await account.db.transaction(async (db) => {\n      for (const statement of statements) {\n        await db.execute(statement);\n      }\n    });\n\n    return statements;\n  }\n}\n"]}
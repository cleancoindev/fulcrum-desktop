{"version":3,"sources":["../../../../src/main/sync/tasks/download-sequence.js"],"names":["PAGE_SIZE","DownloadSequence","constructor","form","args","pageSize","syncResourceName","syncResourceScope","syncLabel","name","resourceName","lastSync","fetchObjects","account","sequence","findOrCreate","database","attributes","process","object","finish","fail","results","console","log","organizationName","green","red","run","dataSource","state","checkSyncState","needsUpdate","getTime","download","beginFetchTime","Date","progress","message","downloading","blue","totalFetchTime","statusCode","data","JSON","parse","body","objects","db","now","processing","count","total","length","transaction","index","totalTime","finished","cyan","next_sequence","update"],"mappings":"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","file":"download-sequence.js","sourcesContent":["import Task from './task';\nimport {format} from 'util';\n\nconst PAGE_SIZE = 1000;\n\nexport default class DownloadSequence extends Task {\n  constructor({form, ...args}) {\n    super(args);\n\n    this.form = form;\n  }\n\n  get pageSize() {\n    return PAGE_SIZE;\n  }\n\n  get syncResourceName() {\n  }\n\n  get syncResourceScope() {\n    return null;\n  }\n\n  get syncLabel() {\n    return this.form.name;\n  }\n\n  get resourceName() {\n  }\n\n  get lastSync() {\n  }\n\n  fetchObjects(account, lastSync, sequence) {\n  }\n\n  findOrCreate(database, account, attributes) {\n  }\n\n  async process(object, attributes) {\n  }\n\n  async finish() {\n  }\n\n  fail(account, results) {\n    console.log(account.organizationName.green, 'failed'.red);\n  }\n\n  async run({account, dataSource}) {\n    const state = await this.checkSyncState(account, this.syncResourceName, this.syncResourceScope);\n\n    if (!state.needsUpdate) {\n      return;\n    }\n\n    const lastSync = this.lastSync;\n\n    const sequence = lastSync ? lastSync.getTime() : null;\n\n    this.dataSource = dataSource;\n\n    await this.download(account, lastSync, sequence, state);\n  }\n\n  async download(account, lastSync, sequence, state) {\n    const beginFetchTime = new Date();\n\n    this.progress({message: this.downloading + ' ' + this.syncLabel.blue});\n\n    const results = await this.fetchObjects(account, lastSync, sequence);\n\n    const totalFetchTime = new Date().getTime() - beginFetchTime.getTime();\n\n    if (results.statusCode !== 200) {\n      this.fail(account, results);\n      return;\n    }\n\n    const data = JSON.parse(results.body);\n\n    const objects = data[this.resourceName];\n\n    const db = account.db;\n\n    let now = new Date();\n\n    this.progress({message: this.processing + ' ' + this.syncLabel.blue, count: 0, total: objects.length});\n\n    await db.transaction(async (database) => {\n      for (let index = 0; index < objects.length; ++index) {\n        const attributes = objects[index];\n\n        const object = await this.findOrCreate(database, account, attributes);\n\n        await this.process(object, attributes);\n\n        this.progress({message: this.processing + ' ' + this.syncLabel.blue, count: index + 1, total: objects.length});\n      }\n    });\n\n    const totalTime = new Date().getTime() - now.getTime();\n\n    await this.finish();\n\n    const message = format(this.finished + ' %s | %s | %s',\n                           this.syncLabel.blue,\n                           (totalFetchTime + 'ms').cyan,\n                           (totalTime + 'ms').red);\n\n    this.progress({message, count: objects.length, total: objects.length});\n\n    if (data.next_sequence) {\n      await this.download(account, lastSync, data.next_sequence, state);\n    } else {\n      await state.update();\n    }\n  }\n}\n"]}
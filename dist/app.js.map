{"version":3,"sources":["../src/app.js"],"names":["app","App","instance","constructor","_plugins","_pluginsByName","_listeners","_api","_rootDirectory","join","homedir","mkdirp","api","yargs","args","argv","dir","name","sync","db","_db","on","func","push","off","index","indexOf","splice","emit","listener","initialize","file","initializePlugins","dispose","plugin","close","runTask","command","_","console","error","pluginPaths","pluginPath","fullPath","resolve","PluginClass","require","default","nameParts","dirname","split","sep","length","replace","log","fetchAccount","where","organization_name","accounts","findAll"],"mappings":"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","file":"app.js","sourcesContent":["import glob from 'glob';\nimport path from 'path';\nimport yargs from 'yargs';\nimport mkdirp from 'mkdirp';\nimport os from 'os';\nimport database from './db/database';\nimport api from './api';\n\nimport Account from './models/account';\n\nlet app = null;\n\nclass App {\n  static get instance() {\n    return app;\n  }\n\n  constructor() {\n    this._plugins = [];\n    this._pluginsByName = [];\n    this._listeners = {};\n    this._api = api;\n\n    // TODO(zhm) this needs to be adjusted for Windows and Linux\n    this._rootDirectory = path.join(os.homedir(), 'Documents', 'fulcrum-sync');\n\n    this.mkdirp('data');\n    this.mkdirp('plugins');\n    this.mkdirp('media');\n    this.mkdirp('reports');\n  }\n\n  get api() {\n    return this._api;\n  }\n\n  get yargs() {\n    return yargs;\n  }\n\n  get args() {\n    return this.yargs.argv;\n  }\n\n  dir(dir) {\n    return path.join(this._rootDirectory, dir);\n  }\n\n  mkdirp(name) {\n    mkdirp.sync(this.dir(name));\n  }\n\n  get db() {\n    return this._db;\n  }\n\n  on(name, func) {\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n\n    this._listeners[name].push(func);\n  }\n\n  off(name, func) {\n    if (this._listeners[name]) {\n      const index = this._listeners.indexOf(func);\n\n      if (index > -1) {\n        this._listeners.splice(index, 1);\n      }\n    }\n  }\n\n  async emit(name, ...args) {\n    if (this._listeners[name]) {\n      for (const listener of this._listeners[name]) {\n        await listener(...args);\n      }\n    }\n  }\n\n  async initialize() {\n    // process.env.NODE_PATH = __dirname;\n    // require('module').Module._initPaths();\n    // console.log(process.env.NODE_PATH);\n\n    const file = path.join(this.dir('data'), 'fulcrum.db');\n\n    this._db = await database({file});\n\n    await this.initializePlugins();\n  }\n\n  async dispose() {\n    for (const plugin of this._plugins) {\n      if (plugin.dispose) {\n        await plugin.dispose();\n      }\n    }\n\n    await this._db.close();\n  }\n\n  async runTask(command) {\n    const name = command.args._[1];\n\n    const plugin = this._pluginsByName[name];\n\n    if (plugin && plugin.runTask) {\n      await plugin.runTask({app: this, yargs});\n    } else {\n      console.error('Plugin named', name, 'not found');\n    }\n  }\n\n  async initializePlugins() {\n    const pluginPaths = glob.sync(path.join(this.dir('plugins'), '*', 'plugin.js'));\n\n    for (const pluginPath of pluginPaths) {\n      const fullPath = path.resolve(pluginPath);\n\n      const PluginClass = require(fullPath).default;\n\n      const plugin = new PluginClass({db: this.db, app: this});\n\n      const nameParts = path.dirname(fullPath).split(path.sep);\n      const name = nameParts[nameParts.length - 1].replace(/^fulcrum-sync-/, '');\n\n      this._pluginsByName[name] = plugin;\n      this._plugins.push(plugin);\n\n      console.log('Loading plugin', fullPath);\n\n      plugin.app = this;\n\n      await plugin.initialize({app: this});\n    }\n  }\n\n  async fetchAccount(name) {\n    const where = {};\n\n    if (name) {\n      where.organization_name = name;\n    }\n\n    const accounts = await Account.findAll(this.db, where);\n\n    return accounts[0];\n  }\n}\n\napp = new App();\n\nexport default app;\n"]}
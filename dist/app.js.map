{"version":3,"sources":["../src/app.js"],"names":["app","App","instance","constructor","_plugins","_pluginsByName","_listeners","_api","_rootDirectory","join","homedir","mkdirp","api","dir","name","sync","db","_db","on","func","push","off","index","indexOf","splice","emit","args","listener","initialize","file","initializePlugins","dispose","plugin","close","runTask","command","_","yargs","console","error","pluginPaths","pluginPath","fullPath","resolve","PluginClass","require","default","nameParts","dirname","split","sep","length","log","fetchAccount","where","organization_name","accounts","findAll"],"mappings":"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","file":"app.js","sourcesContent":["import glob from 'glob';\nimport path from 'path';\nimport yargs from 'yargs';\nimport mkdirp from 'mkdirp';\nimport os from 'os';\nimport database from './db/database';\nimport api from './api';\n\nimport Account from './models/account';\n\nlet app = null;\n\nclass App {\n  static get instance() {\n    return app;\n  }\n\n  constructor() {\n    this._plugins = [];\n    this._pluginsByName = [];\n    this._listeners = {};\n    this._api = api;\n\n    // TODO(zhm) this needs to be adjusted for Windows and Linux\n    this._rootDirectory = path.join(os.homedir(), 'Documents', 'fulcrum-sync');\n\n    this.mkdirp('data');\n    this.mkdirp('plugins');\n    this.mkdirp('media');\n    this.mkdirp('reports');\n  }\n\n  get api() {\n    return this._api;\n  }\n\n  dir(dir) {\n    return path.join(this._rootDirectory, dir);\n  }\n\n  mkdirp(name) {\n    mkdirp.sync(this.dir(name));\n  }\n\n  get db() {\n    return this._db;\n  }\n\n  on(name, func) {\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n\n    this._listeners[name].push(func);\n  }\n\n  off(name, func) {\n    if (this._listeners[name]) {\n      const index = this._listeners.indexOf(func);\n\n      if (index > -1) {\n        this._listeners.splice(index, 1);\n      }\n    }\n  }\n\n  async emit(name, ...args) {\n    if (this._listeners[name]) {\n      for (const listener of this._listeners[name]) {\n        await listener(...args);\n      }\n    }\n  }\n\n  async initialize() {\n    const file = path.join(this.dir('data'), 'fulcrum.db');\n\n    this._db = await database({file});\n\n    await this.initializePlugins();\n  }\n\n  async dispose() {\n    for (const plugin of this._plugins) {\n      if (plugin.dispose) {\n        await plugin.dispose();\n      }\n    }\n\n    await this._db.close();\n  }\n\n  async runTask(command) {\n    const name = command.args._[1];\n\n    const plugin = this._pluginsByName[name];\n\n    if (plugin && plugin.runTask) {\n      await plugin.runTask({app: this, yargs});\n    } else {\n      console.error('Plugin named', name, 'not found');\n    }\n  }\n\n  async initializePlugins() {\n    const pluginPaths = glob.sync(path.join(this.dir('plugins'), '*', 'plugin.js'));\n\n    for (const pluginPath of pluginPaths) {\n      const fullPath = path.resolve(pluginPath);\n\n      const PluginClass = require(fullPath).default;\n\n      const plugin = new PluginClass({db: this.db, app: this});\n\n      const nameParts = path.dirname(fullPath).split(path.sep);\n      const name = nameParts[nameParts.length - 1];\n\n      this._pluginsByName[name] = plugin;\n      this._plugins.push(plugin);\n\n      console.log('Loading plugin', fullPath);\n\n      await plugin.initialize({app: this});\n    }\n  }\n\n  async fetchAccount(name) {\n    const where = {};\n\n    if (name) {\n      where.organization_name = name;\n    }\n\n    const accounts = await Account.findAll(this.db, where);\n\n    return accounts[0];\n  }\n}\n\napp = new App();\n\nexport default app;\n"]}
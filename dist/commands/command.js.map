{"version":3,"sources":["../../src/commands/command.js"],"names":["longStackTraces","config","JSON","parse","readFileSync","join","toString","Command","setup","app","_db","initialize","db","destroy","close","shutdown","yargs","args","argv","fetchAccount","name","where","organization_name","accounts","findAll","createDataSource","account","dataSource","localDatabase","add","load","start","run","err","console","error","stack"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;;;;;;;AAEA,mBAAQA,eAAR;;AAEA,MAAMC,SAASC,KAAKC,KAAL,CAAW,aAAGC,YAAH,CAAgB,eAAKC,IAAL,CAAU,MAAV,EAAkB,aAAlB,CAAhB,EAAkDC,QAAlD,EAAX,CAAf;;AAEe,MAAMC,OAAN,CAAc;AACrBC,OAAN,GAAc;AAAA;;AAAA;AACZ,YAAKC,GAAL;;AAEA,YAAKC,GAAL,GAAW,MAAM,wBAAS,MAAKT,MAAd,CAAjB;;AAEA,YAAM,MAAKQ,GAAL,CAASE,UAAT,CAAoB,EAACC,IAAI,MAAKA,EAAV,EAApB,CAAN;AALY;AAMb;;AAEKC,SAAN,GAAgB;AAAA;;AAAA;AACd,YAAM,OAAKH,GAAL,CAASI,KAAT,EAAN;;AAEA,uBAASC,QAAT;AAHc;AAIf;;AAED,MAAIH,EAAJ,GAAS;AACP,WAAO,KAAKF,GAAZ;AACD;;AAED,MAAIM,KAAJ,GAAY;AACV;AACD;;AAED,MAAIC,IAAJ,GAAW;AACT,WAAO,gBAAMC,IAAb;AACD;;AAED,MAAIjB,MAAJ,GAAa;AACX,WAAOA,MAAP;AACD;;AAEKkB,cAAN,CAAmBC,IAAnB,EAAyB;AAAA;;AAAA;AACvB,YAAMC,QAAQ,EAAd;;AAEA,UAAID,IAAJ,EAAU;AACRC,cAAMC,iBAAN,GAA0BF,IAA1B;AACD;;AAED,YAAMG,WAAW,MAAM,kBAAQC,OAAR,CAAgB,OAAKZ,EAArB,EAAyBS,KAAzB,CAAvB;;AAEA,aAAOE,QAAP;AATuB;AAUxB;;AAEKE,kBAAN,CAAuBC,OAAvB,EAAgC;AAAA;;AAAA;AAC9B,UAAIC,aAAa,6BAAjB;;AAEA,YAAMC,gBAAgB,sCAA4BF,OAA5B,CAAtB;;AAEAC,iBAAWE,GAAX,CAAeD,aAAf;;AAEA,YAAMA,cAAcE,IAAd,CAAmB,OAAKlB,EAAxB,CAAN;;AAEA,aAAOe,UAAP;AAT8B;AAU/B;;AAEKI,OAAN,GAAc;AAAA;;AAAA;AACZ,UAAI;AACF,cAAM,OAAKvB,KAAL,EAAN;AACA,cAAM,OAAKwB,GAAL,EAAN;AACA,cAAM,OAAKnB,OAAL,EAAN;AACD,OAJD,CAIE,OAAOoB,GAAP,EAAY;AACZC,gBAAQC,KAAR,CAAcF,IAAIG,KAAlB;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAM,OAAKvB,OAAL,EAAN;AACD;AAdW;AAeb;AAtE0B;kBAARN,O","file":"command.js","sourcesContent":["import 'colors';\nimport yargs from 'yargs';\nimport Promise from 'bluebird';\nimport Account from '../models/account';\nimport database from '../db/database';\nimport fs from 'fs';\nimport path from 'path';\nimport { DataSource } from 'fulcrum-core';\nimport LocalDatabaseDataSource from '../local-database-data-source';\nimport { Postgres } from 'minidb';\nimport app from '../app';\n\nPromise.longStackTraces();\n\nconst config = JSON.parse(fs.readFileSync(path.join('data', 'config.json')).toString());\n\nexport default class Command {\n  async setup() {\n    this.app = app;\n\n    this._db = await database(this.config);\n\n    await this.app.initialize({db: this.db});\n  }\n\n  async destroy() {\n    await this._db.close();\n\n    Postgres.shutdown();\n  }\n\n  get db() {\n    return this._db;\n  }\n\n  get yargs() {\n    return yargs;\n  }\n\n  get args() {\n    return yargs.argv;\n  }\n\n  get config() {\n    return config;\n  }\n\n  async fetchAccount(name) {\n    const where = {};\n\n    if (name) {\n      where.organization_name = name;\n    }\n\n    const accounts = await Account.findAll(this.db, where);\n\n    return accounts;\n  }\n\n  async createDataSource(account) {\n    let dataSource = new DataSource();\n\n    const localDatabase = new LocalDatabaseDataSource(account);\n\n    dataSource.add(localDatabase);\n\n    await localDatabase.load(this.db);\n\n    return dataSource;\n  }\n\n  async start() {\n    try {\n      await this.setup();\n      await this.run();\n      await this.destroy();\n    } catch (err) {\n      console.error(err.stack);\n      // if (this.args.verbose) {\n      //   console.error(err.stack);\n      // } else {\n      //   console.error(err.message);\n      // }\n\n      await this.destroy();\n    }\n  }\n}\n"]}
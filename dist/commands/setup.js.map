{"version":3,"sources":["../../src/commands/setup.js"],"names":["exit","answers","prompt","questions","config","type","database","writeFileSync","join","JSON","stringify","db","results","authenticate","email","password","response","body","statusCode","console","log","green","user","parse","context","contexts","contextAttributes","user_resource_id","id","organization_resource_id","account","findOrCreate","_organizationName","name","_firstName","first_name","_lastName","last_name","_email","_token","api_token","save","red","retry","againQuestion","again","setup","longStackTraces","message","choices","default","onerror","err","close","error","stack","then","result","catch"],"mappings":";;;+BA4CA,aAAuB;AACrB,QAAIA,OAAO,KAAX;;AAEA,WAAO,CAACA,IAAR,EAAc;AACZ,YAAMC,UAAU,MAAMC,OAAOC,SAAP,CAAtB;;AAEA,YAAMC,SAAS,EAACC,MAAMJ,QAAQK,QAAf,EAAf;;AAEA,mBAAGC,aAAH,CAAiB,eAAKC,IAAL,CAAU,MAAV,EAAkB,aAAlB,CAAjB,EAAmDC,KAAKC,SAAL,CAAeN,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAnD;;AAEAO,WAAK,MAAM,wBAAS,EAACN,MAAMJ,QAAQK,QAAf,EAAT,CAAX;;AAEA,YAAMM,UAAU,MAAM,iBAAOC,YAAP,CAAoBZ,QAAQa,KAA5B,EAAmCb,QAAQc,QAA3C,CAAtB;AACA,YAAMC,WAAWJ,OAAjB;AACA,YAAMK,OAAOL,QAAQK,IAArB;;AAEA,UAAID,SAASE,UAAT,KAAwB,GAA5B,EAAiC;AAC/BC,gBAAQC,GAAR,CAAY,CAAC,qCAAqCnB,QAAQa,KAA9C,EAAqDO,KAAjE;AACA,cAAMC,OAAOb,KAAKc,KAAL,CAAWN,IAAX,EAAiBK,IAA9B;;AAEA,aAAK,IAAIE,OAAT,IAAoBF,KAAKG,QAAzB,EAAmC;AACjC,gBAAMC,oBAAoB;AACxBC,8BAAkBL,KAAKM,EADC;AAExBC,sCAA0BL,QAAQI;AAFV,WAA1B;;AAKA,gBAAME,UAAU,MAAM,kBAAQC,YAAR,CAAqBpB,EAArB,EAAyBe,iBAAzB,CAAtB;;AAEAI,kBAAQE,iBAAR,GAA4BR,QAAQS,IAApC;AACAH,kBAAQI,UAAR,GAAqBZ,KAAKa,UAA1B;AACAL,kBAAQM,SAAR,GAAoBd,KAAKe,SAAzB;AACAP,kBAAQQ,MAAR,GAAiBhB,KAAKR,KAAtB;AACAgB,kBAAQS,MAAR,GAAiBf,QAAQgB,SAAzB;;AAEA,gBAAMV,QAAQW,IAAR,EAAN;;AAEAtB,kBAAQC,GAAR,CAAY,IAAIC,KAAhB,EAAuBG,QAAQS,IAA/B;AACD;AACD,eAAOX,IAAP;AACD,OAvBD,MAuBO;AACLH,gBAAQC,GAAR,CAAY,iCAAiCsB,GAA7C;;AAEA,YAAIC,QAAQ,MAAMzC,OAAO0C,aAAP,CAAlB;;AAEA,YAAI,CAACD,MAAME,KAAX,EAAkB;AAChB7C,iBAAO,IAAP;AACD;AACF;AACF;;AAED,WAAO,IAAP;AACD,G;;kBAnDc8C,K;;;;;AA5Cf;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;;;;;AAEA,mBAAQC,eAAR;;AAEA,SAAS7C,MAAT,CAAgBC,SAAhB,EAA2B;AACzB,SAAO,mBAASD,MAAT,CAAgBC,SAAhB,CAAP;AACD;;AAED,MAAMA,YAAY,CAChB;AACEE,QAAM,OADR;AAEE4B,QAAM,OAFR;AAGEe,WAAS;AAHX,CADgB,EAKb;AACD3C,QAAM,UADL;AAED2C,WAAS,6BAFR;AAGDf,QAAM;AAHL,CALa,EASb;AACD5B,QAAM,MADL;AAED2C,WAAS,sBAFR;AAGDC,WAAS,CAAC,QAAD,EAAW,YAAX,CAHR;AAIDC,WAAS,QAJR;AAKDjB,QAAM;AALL,CATa,CAAlB;;AAkBA,MAAMW,gBAAgB;AACpBvC,QAAM,SADc;AAEpB4B,QAAM,OAFc;AAGpBe,WAAS,qCAHW;AAIpB,aAAW;AAJS,CAAtB;;AAOA,IAAIrC,KAAK,IAAT;;AAuDA,SAASwC,OAAT,CAAiBC,GAAjB,EAAsB;AACpBjC,UAAQC,GAAR,CAAY,QAAZ,EAAsBgC,GAAtB;;AAEA,MAAIzC,EAAJ,EAAQ;AACNA,OAAG0C,KAAH;AACD;;AAEDlC,UAAQmC,KAAR,CAAcF,IAAIG,KAAlB;;AAEA,QAAMH,GAAN;AACD;;AAEDN,QAAQU,IAAR,CAAa,UAASC,MAAT,EAAiB;AAC5B,MAAI9C,EAAJ,EAAQ;AACNA,OAAG0C,KAAH;AACD;AACF,CAJD,EAIGK,KAJH,CAISP,OAJT","file":"setup.js","sourcesContent":["import 'colors';\nimport inquirer from 'inquirer';\nimport Account from '../models/account';\nimport database from '../db/database';\nimport fs from 'fs';\nimport path from 'path';\n\nimport Client from '../api/client';\n\nimport Promise from 'bluebird';\n\nPromise.longStackTraces();\n\nfunction prompt(questions) {\n  return inquirer.prompt(questions);\n}\n\nconst questions = [\n  {\n    type: 'input',\n    name: 'email',\n    message: 'Enter your Fulcrum email address'\n  }, {\n    type: 'password',\n    message: 'Enter your Fulcrum password',\n    name: 'password'\n  }, {\n    type: 'list',\n    message: 'Select database type',\n    choices: ['SQLite', 'PostgreSQL'],\n    default: 'SQLite',\n    name: 'database'\n  }\n];\n\nconst againQuestion = {\n  type: 'confirm',\n  name: 'again',\n  message: 'Try again? (just hit enter for YES)',\n  'default': true\n};\n\nlet db = null;\n\nasync function setup() {\n  let exit = false;\n\n  while (!exit) {\n    const answers = await prompt(questions);\n\n    const config = {type: answers.database};\n\n    fs.writeFileSync(path.join('data', 'config.json'), JSON.stringify(config, null, 2));\n\n    db = await database({type: answers.database});\n\n    const results = await Client.authenticate(answers.email, answers.password);\n    const response = results;\n    const body = results.body;\n\n    if (response.statusCode === 200) {\n      console.log(('Successfully authenticated with ' + answers.email).green);\n      const user = JSON.parse(body).user;\n\n      for (let context of user.contexts) {\n        const contextAttributes = {\n          user_resource_id: user.id,\n          organization_resource_id: context.id\n        };\n\n        const account = await Account.findOrCreate(db, contextAttributes);\n\n        account._organizationName = context.name;\n        account._firstName = user.first_name;\n        account._lastName = user.last_name;\n        account._email = user.email;\n        account._token = context.api_token;\n\n        await account.save();\n\n        console.log('âœ“'.green, context.name);\n      }\n      return user;\n    } else {\n      console.log('Username or password incorrect'.red);\n\n      let retry = await prompt(againQuestion);\n\n      if (!retry.again) {\n        exit = true;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction onerror(err) {\n  console.log('ERROR!', err);\n\n  if (db) {\n    db.close();\n  }\n\n  console.error(err.stack);\n\n  throw err;\n}\n\nsetup().then(function(result) {\n  if (db) {\n    db.close();\n  }\n}).catch(onerror);\n"]}
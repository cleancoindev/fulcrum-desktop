{"version":3,"sources":["../src/record-values.js"],"names":["RecordValues","updateForRecordStatements","db","record","statements","push","apply","deleteForRecordStatements","form","insertForRecordStatements","insertRowForFeatureStatement","insertChildFeaturesForFeatureStatements","insertMultipleValuesForFeatureStatements","insertChildMultipleValuesForFeatureStatements","feature","parentFeature","values","columnValuesForFeature","systemValues","systemColumnValuesForFeature","Object","assign","tableName","tableNameWithForm","_element","insertStatement","pk","formValue","formValues","all","element","isRepeatableElement","repeatableItem","_items","isEmpty","columnValue","isNumber","isString","isArray","isDate","getFullYear","key","toLowerCase","multipleValuesForFeature","multipleValueTableNameWithForm","parentResourceId","id","multipleValueItem","insertValues","text_value","value","record_id","rowID","record_resource_id","parent_resource_id","featureValues","multipleValues","_projectRowID","project_id","project_resource_id","projectID","_assignedToRowID","assigned_to_id","assigned_to_resource_id","assignedToID","_createdByRowID","created_by_id","created_by_resource_id","createdByID","_updatedByRowID","updated_by_id","updated_by_resource_id","updatedByID","_changesetRowID","changeset_id","changeset_resource_id","changesetID","status","latitude","longitude","altitude","speed","course","vertical_accuracy","verticalAccuracy","horizontal_accuracy","horizontalAccuracy","resource_id","index","hasCoordinate","record_status","record_project_id","record_project_resource_id","record_assigned_to_id","record_assigned_to_resource_id","createdBy","updatedBy","changeset","title","displayValue","searchableValue","form_values","JSON","stringify","toJSON","record_index_text","created_at","clientCreatedAt","createdAt","updated_at","clientUpdatedAt","updatedAt","version","server_created_at","server_updated_at","created_duration","createdDuration","updated_duration","updatedDuration","edited_duration","editedDuration","created_latitude","createdLatitude","created_longitude","createdLongitude","created_altitude","createdAltitude","created_horizontal_accuracy","createdAccuracy","updated_latitude","updatedLatitude","updated_longitude","updatedLongitude","updated_altitude","updatedAltitude","updated_horizontal_accuracy","updatedAccuracy","deleteRowsForRecordStatement","deleteStatement","deleteRowsStatement","repeatables","elementsOfType","repeatable","deleteForFormStatements","_accountRowID"],"mappings":"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","file":"record-values.js","sourcesContent":["import { format } from 'util';\nimport _ from 'lodash';\nimport { Record, RepeatableItemValue } from 'fulcrum-core';\nimport pgformat from 'pg-format';\n\nexport default class RecordValues {\n  static updateForRecordStatements(db, record) {\n    const statements = [];\n\n    statements.push.apply(statements, this.deleteForRecordStatements(db, record, record.form));\n    statements.push.apply(statements, this.insertForRecordStatements(db, record, record.form));\n\n    return statements;\n  }\n\n  static insertForRecordStatements(db, record, form) {\n    const statements = [];\n\n    statements.push(this.insertRowForFeatureStatement(db, form, record, null, record));\n    statements.push.apply(statements, this.insertChildFeaturesForFeatureStatements(db, form, record, record));\n    statements.push.apply(statements, this.insertMultipleValuesForFeatureStatements(db, form, record, record));\n    statements.push.apply(statements, this.insertChildMultipleValuesForFeatureStatements(db, form, record, record));\n\n    return statements;\n  }\n\n  static insertRowForFeatureStatement(db, form, feature, parentFeature, record) {\n    const values = this.columnValuesForFeature(feature);\n    const systemValues = this.systemColumnValuesForFeature(feature, parentFeature, record);\n\n    Object.assign(values, systemValues);\n\n    let tableName = null;\n\n    if (feature instanceof RepeatableItemValue) {\n      // TODO(zhm) add public interface for accessing _element, like `get repeatableElement()`\n      tableName = this.tableNameWithForm(form, feature._element);\n    } else {\n      tableName = this.tableNameWithForm(form, null);\n    }\n\n    return db.insertStatement(tableName, values, {pk: 'id'});\n  }\n\n  static insertChildFeaturesForFeatureStatements(db, form, feature, record) {\n    const statements = [];\n\n    for (const formValue of feature.formValues.all) {\n      if (formValue.element.isRepeatableElement) {\n        // TODO(zhm) add public interface for _items\n        for (const repeatableItem of formValue._items) {\n          statements.push(this.insertRowForFeatureStatement(db, form, repeatableItem, feature, record));\n          statements.push.apply(statements, this.insertChildFeaturesForFeatureStatements(db, form, repeatableItem, record));\n        }\n      }\n    }\n\n    return statements;\n  }\n\n  static columnValuesForFeature(feature) {\n    const values = {};\n\n    for (const formValue of feature.formValues.all) {\n      if (formValue.isEmpty) {\n        continue;\n      }\n\n      let columnValue = formValue.columnValue;\n\n      if (_.isNumber(columnValue) || _.isString(columnValue) || _.isArray(columnValue) || _.isDate(columnValue)) {\n        // don't allow dates greater than 9999, yes - they exist in the wild\n        if (_.isDate(columnValue) && columnValue.getFullYear() > 9999) {\n          columnValue = null;\n        }\n\n        values['f' + formValue.element.key.toLowerCase()] = columnValue;\n      } else if (columnValue) {\n        Object.assign(values, columnValue);\n      }\n    }\n\n    return values;\n  }\n\n  static insertMultipleValuesForFeatureStatements(db, form, feature, record) {\n    const statements = [];\n\n    const values = this.multipleValuesForFeature(feature, record);\n\n    const tableName = this.multipleValueTableNameWithForm(form);\n\n    let parentResourceId = null;\n\n    if (feature instanceof RepeatableItemValue) {\n      parentResourceId = feature.id;\n    }\n\n    for (const multipleValueItem of values) {\n      const insertValues = Object.assign({}, {key: multipleValueItem.element.key, text_value: multipleValueItem.value},\n                                         {record_id: record.rowID, record_resource_id: record.id, parent_resource_id: parentResourceId});\n\n      statements.push(db.insertStatement(tableName, insertValues, {pk: 'id'}));\n    }\n\n    return statements;\n  }\n\n  static insertChildMultipleValuesForFeatureStatements(db, form, feature, record) {\n    const statements = [];\n\n    for (const formValue of feature.formValues.all) {\n      if (formValue.isRepeatableElement) {\n        for (const repeatableItem of formValue._items) {\n          statements.push.apply(statements, this.insertMultipleValuesForFeatureStatements(db, form, repeatableItem, record));\n          statements.push.apply(statements, this.insertChildMultipleValuesForFeatureStatements(db, form, repeatableItem, record));\n        }\n      }\n    }\n\n    return statements;\n  }\n\n  static multipleValuesForFeature(feature, record) {\n    const values = [];\n\n    for (const formValue of feature.formValues.all) {\n      if (formValue.isEmpty) {\n        continue;\n      }\n\n      const featureValues = formValue.multipleValues;\n\n      if (featureValues) {\n        values.push.apply(values, featureValues);\n      }\n    }\n\n    return values;\n  }\n\n  static systemColumnValuesForFeature(feature, parentFeature, record) {\n    const values = {};\n\n    values.record_id = record.rowID;\n    values.record_resource_id = record.id;\n\n    if (feature instanceof Record) {\n      if (record._projectRowID) {\n        values.project_id = record._projectRowID;\n        values.project_resource_id = record.projectID;\n      }\n\n      if (record._assignedToRowID) {\n        values.assigned_to_id = record._assignedToRowID;\n        values.assigned_to_resource_id = record.assignedToID;\n      }\n\n      if (record._createdByRowID) {\n        values.created_by_id = record._createdByRowID;\n        values.created_by_resource_id = record.createdByID;\n      }\n\n      if (record._updatedByRowID) {\n        values.updated_by_id = record._updatedByRowID;\n        values.updated_by_resource_id = record.updatedByID;\n      }\n\n      if (record._changesetRowID) {\n        values.changeset_id = record._changesetRowID;\n        values.changeset_resource_id = record.changesetID;\n      }\n\n      if (record.status) {\n        values.status = record.status;\n      }\n\n      if (record.latitude) {\n        values.latitude = record.latitude;\n      }\n\n      if (record.longitude) {\n        values.longitude = record.longitude;\n      }\n\n      values.altitude = record.altitude;\n      values.speed = record.speed;\n      values.course = record.course;\n      values.vertical_accuracy = record.verticalAccuracy;\n      values.horizontal_accuracy = record.horizontalAccuracy;\n    } else if (feature instanceof RepeatableItemValue) {\n      values.resource_id = feature.id;\n      values.index = feature.index;\n      values.parent_resource_id = parentFeature.id;\n\n      if (feature.hasCoordinate) {\n        values.latitude = feature.latitude;\n        values.longitude = feature.longitude;\n      }\n\n      // record values\n      if (record.status) {\n        values.record_status = record.status;\n      }\n\n      if (record._projectRowID) {\n        values.record_project_id = record._projectRowID;\n        values.record_project_resource_id = record.projectID;\n      }\n\n      if (record._assignedToRowID) {\n        values.record_assigned_to_id = record._assignedToRowID;\n        values.record_assigned_to_resource_id = record.assignedToID;\n      }\n\n      // linked fields\n      if (feature.createdBy) {\n        values.created_by_id = feature.createdBy.rowID;\n        values.created_by_resource_id = feature.createdByID;\n      }\n\n      if (feature.updatedBy) {\n        values.updated_by_id = feature.updatedBy.rowID;\n        values.updated_by_resource_id = feature.updatedByID;\n      }\n\n      if (feature.changeset) {\n        values.changeset_id = feature.changeset.rowID;\n        values.changeset_resource_id = feature.changesetID;\n      } else if (record._changesetRowID) {\n        values.changeset_id = record._changesetRowID;\n        values.changeset_resource_id = record.changesetID;\n      }\n    }\n\n    values.title = feature.displayValue;\n\n    const searchableValue = feature.searchableValue;\n\n    values.form_values = JSON.stringify(feature.formValues.toJSON());\n    values.record_index_text = searchableValue;\n    // values.record_index = {raw: `to_tsvector(${ pgformat('%L', searchableValue) })`};\n\n    // if (feature.hasCoordinate) {\n    //   const wkt = pgformat('POINT(%s %s)', feature.longitude, feature.latitude);\n\n    //   values.geometry = {raw: `ST_Force2D(ST_SetSRID(ST_GeomFromText('${ wkt }'), 4326))`};\n    // } else {\n    //   values.geometry = null;\n    // }\n\n    values.created_at = feature.clientCreatedAt || feature.createdAt;\n    values.updated_at = feature.clientUpdatedAt || feature.updatedAt;\n    values.version = feature.version;\n\n    if (values.created_by_id == null) {\n      values.created_by_id = -1;\n    }\n\n    if (values.updated_by_id == null) {\n      values.updated_by_id = -1;\n    }\n\n    values.server_created_at = feature.createdAt;\n    values.server_updated_at = feature.updatedAt;\n\n    values.created_duration = feature.createdDuration;\n    values.updated_duration = feature.updatedDuration;\n    values.edited_duration = feature.editedDuration;\n\n    values.created_latitude = feature.createdLatitude;\n    values.created_longitude = feature.createdLongitude;\n    values.created_altitude = feature.createdAltitude;\n    values.created_horizontal_accuracy = feature.createdAccuracy;\n\n    // if (feature.hasCreatedCoordinate) {\n    //   const wkt = pgformat('POINT(%s %s)', feature.createdLongitude, feature.createdLatitude);\n\n    //   values.created_geometry = {raw: `ST_Force2D(ST_SetSRID(ST_GeomFromText('${ wkt }'), 4326))`};\n    // }\n\n    values.updated_latitude = feature.updatedLatitude;\n    values.updated_longitude = feature.updatedLongitude;\n    values.updated_altitude = feature.updatedAltitude;\n    values.updated_horizontal_accuracy = feature.updatedAccuracy;\n\n    // if (feature.hasUpdatedCoordinate) {\n    //   const wkt = pgformat('POINT(%s %s)', feature.updatedLongitude, feature.updatedLatitude);\n\n    //   values.updated_geometry = {raw: `ST_Force2D(ST_SetSRID(ST_GeomFromText('${ wkt }'), 4326))`};\n    // }\n\n    return values;\n  }\n\n  static deleteRowsForRecordStatement(db, record, tableName) {\n    return db.deleteStatement(tableName, {record_resource_id: record.id});\n  }\n\n  static deleteRowsStatement(db, tableName) {\n    return db.deleteStatement(tableName, {});\n  }\n\n  static deleteForRecordStatements(db, record, form) {\n    const repeatables = form.elementsOfType('Repeatable');\n\n    const statements = [];\n\n    let tableName = this.tableNameWithForm(form, null);\n\n    statements.push(this.deleteRowsForRecordStatement(db, record, tableName));\n\n    for (const repeatable of repeatables) {\n      tableName = this.tableNameWithForm(form, repeatable);\n\n      statements.push(this.deleteRowsForRecordStatement(db, record, tableName));\n    }\n\n    tableName = this.multipleValueTableNameWithForm(form);\n\n    statements.push(this.deleteRowsForRecordStatement(db, record, tableName));\n\n    return statements;\n  }\n\n  static deleteForFormStatements(db, form) {\n    const repeatables = form.elementsOfType('Repeatable');\n\n    const statements = [];\n\n    let tableName = this.tableNameWithForm(form, null);\n\n    statements.push(this.deleteRowsStatement(db, tableName));\n\n    for (const repeatable of repeatables) {\n      tableName = this.tableNameWithForm(form, repeatable);\n\n      statements.push(this.deleteRowsStatement(db, tableName));\n    }\n\n    tableName = this.multipleValueTableNameWithForm(form);\n\n    statements.push(this.deleteRowsStatement(db, tableName));\n\n    return statements;\n  }\n\n  static multipleValueTableNameWithForm(form) {\n    return format('account_%s_form_%s_values', form._accountRowID, form.rowID);\n  }\n\n  static tableNameWithForm(form, repeatable) {\n    if (repeatable == null) {\n      return format('account_%s_form_%s', form._accountRowID, form.rowID);\n    }\n\n    return format('account_%s_form_%s_%s', form._accountRowID, form.rowID, repeatable.key);\n  }\n}\n"]}
{"version":3,"sources":["../../src/db/migrations.js"],"names":["CURRENT_VERSION","Migrations","currentVersion","constructor","db","executeMigrations","methods","versions","upgrade","version","i","push","length","runMigration","versionName","toString","slice","newVersion","execute","migration","log","up","down","updateDatabaseVersion","message","verbose","console","migrate","createMetadataTable","getDatabaseVersion","result","get","value"],"mappings":"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","file":"migrations.js","sourcesContent":["import Migration from './migration';\n\nconst CURRENT_VERSION = 1;\n\nexport default class Migrations {\n  static get currentVersion() {\n    return CURRENT_VERSION;\n  }\n\n  constructor(db) {\n    this.db = db;\n  }\n\n  async executeMigrations() {\n    const methods = [];\n    const versions = [];\n\n    let upgrade = true;\n\n    if (this.version !== CURRENT_VERSION) {\n      if (this.version > CURRENT_VERSION) {\n        for (let i = this.version; i > CURRENT_VERSION + 1; --i) {\n          versions.push(i);\n        }\n        upgrade = false;\n      } else {\n        for (let i = this.version + 1; i < CURRENT_VERSION + 1; ++i) {\n          versions.push(i);\n        }\n      }\n    }\n\n    if (versions.length > 0) {\n      for (let version of versions) {\n        await this.runMigration(version, upgrade);\n      }\n    }\n\n    return methods;\n  }\n\n  async runMigration(version, upgrade) {\n    let versionName = '000' + version.toString();\n\n    versionName = versionName.slice(-3);\n\n    const newVersion = upgrade ? version : version - 1;\n\n    await this.db.execute('BEGIN TRANSACTION');\n\n    const migration = new Migration(this.db, versionName);\n\n    if (upgrade) {\n      this.log('\\nUpgrading database to version ' + version + '\\n');\n      await migration.up();\n      this.log('\\nUpgraded database to version ' + version + '\\n');\n    } else {\n      this.log('\\nDowngrading database to version ' + newVersion + '\\n');\n      await migration.down();\n      this.log('\\nDowngraded database to version ' + newVersion);\n    }\n\n    await this.updateDatabaseVersion(newVersion);\n\n    await this.db.execute('COMMIT TRANSACTION');\n  }\n\n  async updateDatabaseVersion(version) {\n    await this.db.execute(\"UPDATE metadata SET value = '\" + version + \"' WHERE key = 'database_version'\", null);\n  }\n\n  log(message) {\n    if (this.db.verbose) {\n      return console.log(message);\n    }\n\n    return null;\n  }\n\n  async migrate() {\n    await this.createMetadataTable();\n    await this.getDatabaseVersion();\n    await this.executeMigrations();\n  }\n\n  async getDatabaseVersion() {\n    const result = await this.db.get(\"SELECT key, value FROM metadata WHERE key = 'database_version'\");\n    this.version = result ? +result.value : 0;\n  }\n\n  async createMetadataTable() {\n    await this.db.execute('CREATE TABLE IF NOT EXISTS metadata (key TEXT, value TEXT)', null);\n    await this.db.execute(\"INSERT INTO metadata (key, value) SELECT 'database_version', 0 WHERE NOT EXISTS (SELECT 1 FROM metadata WHERE key = 'database_version')\", null);\n  }\n}\n"]}
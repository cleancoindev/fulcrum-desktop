{"version":3,"sources":["../../src/db/database.js"],"names":["instance","dir","join","sync","sqliteOptions","file","wal","autoVacuum","synchronous","postgresOptions","db","setNoticeProcessor","message","options","type","open","Error","migrations","migrate","database"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAIA,WAAW,IAAf;;AAEA,MAAMC,MAAM,eAAKC,IAAL,CAAU,GAAV,EAAe,MAAf,CAAZ;;AAEA,iBAAOC,IAAP,CAAYF,GAAZ;;AAEA,MAAMG,gBAAgB;AACpBC,QAAM,eAAKH,IAAL,CAAUD,GAAV,EAAe,eAAf,CADc;AAEpBK,OAAK,IAFe;AAGpBC,cAAY,IAHQ;AAIpBC,eAAa;AAJO,CAAtB;;AAOA,MAAMC,kBAAkB;AACtBC,MAAI;AADkB,CAAxB;;AAIA,iBAASC,kBAAT,CAA6BC,OAAD,IAAa;AACvC;AACA;AACD,CAHD;;;+BAKe,WAAwBC,OAAxB,EAAiC;AAC9C,QAAIb,QAAJ,EAAc;AACZ,aAAOA,QAAP;AACD;;AAED,QAAIa,QAAQC,IAAR,KAAiB,QAArB,EAA+B;AAC7Bd,iBAAW,MAAM,eAAOe,IAAP,CAAYX,aAAZ,CAAjB;AACD,KAFD,MAEO,IAAIS,QAAQC,IAAR,KAAiB,YAArB,EAAmC;AACxCd,iBAAW,qBAAaS,eAAb,CAAX;AACD,KAFM,MAEA;AACL,YAAM,IAAIO,KAAJ,CAAU,gCAAgCH,QAAQC,IAAlD,CAAN;AACD;;AAED,UAAMG,aAAa,yBAAejB,QAAf,CAAnB;;AAEA,UAAMiB,WAAWC,OAAX,EAAN;;AAEA,WAAOlB,QAAP;AACD,G;;WAlB6BmB,Q;;;;SAAAA,Q","file":"database.js","sourcesContent":["import { SQLite, Postgres } from 'minidb';\nimport Migrations from './migrations';\nimport path from 'path';\nimport mkdirp from 'mkdirp';\n\nlet instance = null;\n\nconst dir = path.join('.', 'data');\n\nmkdirp.sync(dir);\n\nconst sqliteOptions = {\n  file: path.join(dir, 'fulcrumapp.db'),\n  wal: true,\n  autoVacuum: true,\n  synchronous: 'off'\n};\n\nconst postgresOptions = {\n  db: 'dbname = fulcrumapp'\n};\n\nPostgres.setNoticeProcessor((message) => {\n  // TODO(zhm) handle warnings on the connection\n  // console.warn(message);\n});\n\nexport default async function database(options) {\n  if (instance) {\n    return instance;\n  }\n\n  if (options.type === 'SQLite') {\n    instance = await SQLite.open(sqliteOptions);\n  } else if (options.type === 'PostgreSQL') {\n    instance = new Postgres(postgresOptions);\n  } else {\n    throw new Error('unsupported database type: ' + options.type);\n  }\n\n  const migrations = new Migrations(instance);\n\n  await migrations.migrate();\n\n  return instance;\n}\n"]}
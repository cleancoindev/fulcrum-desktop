{"version":3,"sources":["../../../src/sync/tasks/download-forms.js"],"names":["SchemaDiffer","Sqlite","Postgres","DownloadForms","run","account","dataSource","sync","checkSyncState","needsUpdate","progress","message","downloading","response","getForms","objects","JSON","parse","body","forms","processing","count","total","length","localForms","findForms","form","formExistsOnServer","attributes","id","_deletedAt","Date","save","index","object","findOrCreate","db","resource_id","account_id","rowID","oldForm","isPersisted","_id","row_id","name","_name","elements","_elementsJSON","isChanged","version","updateFromAPIAttributes","newForm","execute","ident","statements","updateFormTables","tableNameWithForm","trigger","update","finished","oldSchema","newSchema","differ","generator","dialect","afterTransform","tablePrefix","generate","transaction","statement"],"mappings":"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","file":"download-forms.js","sourcesContent":["import Task from './task';\nimport Client from '../../api/Client';\nimport Form from '../../models/form';\nimport {format} from 'util';\nimport SQLiteRecordValues from '../../models/record-values/sqlite-record-values';\n\nimport Schema from 'fulcrum-schema/dist/schema';\nimport sqldiff from 'sqldiff';\nimport V2 from 'fulcrum-schema/dist/schemas/postgres-query-v2';\n\nconst {SchemaDiffer, Sqlite, Postgres} = sqldiff;\n\nexport default class DownloadForms extends Task {\n  async run({account, dataSource}) {\n    const sync = await this.checkSyncState(account, 'forms');\n\n    if (!sync.needsUpdate) {\n      return;\n    }\n\n    this.progress({message: this.downloading + ' forms'});\n\n    const response = await Client.getForms(account);\n\n    const objects = JSON.parse(response.body).forms;\n\n    this.progress({message: this.processing + ' forms', count: 0, total: objects.length});\n\n    const localForms = await account.findForms({});\n\n    // delete all forms that don't exist on the server anymore\n    for (const form of localForms) {\n      let formExistsOnServer = false;\n\n      for (const attributes of objects) {\n        if (attributes.id === form.id) {\n          formExistsOnServer = true;\n          break;\n        }\n      }\n\n      if (!formExistsOnServer) {\n        form._deletedAt = form._deletedAt ? form._deletedAt : new Date();\n        await form.save();\n      }\n    }\n\n    for (let index = 0; index < objects.length; ++index) {\n      const attributes = objects[index];\n\n      const object = await Form.findOrCreate(account.db, {resource_id: attributes.id, account_id: account.rowID});\n\n      let oldForm = null;\n\n      if (object.isPersisted) {\n        oldForm = {\n          id: object._id,\n          row_id: object.rowID,\n          name: object._name,\n          elements: object._elementsJSON\n        };\n      }\n\n      const isChanged = !object.isPersisted || attributes.version !== object.version;\n\n      object.updateFromAPIAttributes(attributes);\n\n      await object.save();\n\n      const newForm = {row_id: object.rowID,\n                       name: object._name,\n                       elements: object._elementsJSON};\n\n      await account.db.execute(format('DROP VIEW IF EXISTS %s',\n                                      account.db.ident(object.name)));\n\n      const statements = await this.updateFormTables(account, oldForm, newForm);\n\n      await account.db.execute(format('CREATE VIEW %s AS SELECT * FROM %s_view_full',\n                                      account.db.ident(object.name),\n                                      SQLiteRecordValues.tableNameWithForm(object)));\n\n      if (isChanged) {\n        await this.trigger('form:save', {form: object, account, statements, oldForm, newForm});\n      }\n\n      this.progress({message: this.processing + ' forms', count: index + 1, total: objects.length});\n    }\n\n    await sync.update();\n\n    this.progress({message: this.finished + ' forms', count: objects.length, total: objects.length});\n  }\n\n  async updateFormTables(account, oldForm, newForm) {\n    let oldSchema = null;\n    let newSchema = null;\n\n    if (oldForm) {\n      oldSchema = new Schema(oldForm, V2, null);\n    }\n\n    if (newForm) {\n      newSchema = new Schema(newForm, V2, null);\n    }\n\n    const differ = new SchemaDiffer(oldSchema, newSchema);\n\n    let generator = null;\n\n    if (account.db.dialect === 'sqlite') {\n      generator = new Sqlite(differ, {afterTransform: null});\n    } else if (account.db.dialect === 'postgresql') {\n      generator = new Postgres(differ, {afterTransform: null});\n    }\n\n    generator.tablePrefix = 'account_' + account.rowID + '_';\n\n    const statements = generator.generate();\n\n    await account.db.transaction(async (db) => {\n      for (const statement of statements) {\n        await db.execute(statement);\n      }\n    });\n\n    return statements;\n  }\n}\n"]}
{"version":3,"sources":["../../../src/sync/tasks/task.js"],"names":["Task","constructor","synchronizer","syncState","_synchronizer","_syncState","getSyncState","resource","scope","find","object","checkSyncState","account","oldState","findSyncState","newState","needsUpdate","hash","update","save","state","execute","dataSource","result","run","bar","console","log","trigger","name","args","emit","downloading","yellow","processing","cyan","finished","green","progress","message","count","total","fmt","options","width","complete","incomplete","clear","tick","_message","curr","render","markDeletedObjects","localObjects","newObjects","objectExistsOnServer","attributes","id","_deletedAt","Date","lookup","record","resourceID","propName","getter","Promise","resolve","err","rowID"],"mappings":"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","file":"task.js","sourcesContent":["import ProgressBar from 'progress';\nimport {format} from 'util';\nimport app from '../../app';\n\nexport default class Task {\n  constructor({synchronizer, syncState}) {\n    this._synchronizer = synchronizer;\n    this._syncState = syncState;\n  }\n\n  get synchronizer() {\n    return this._synchronizer;\n  }\n\n  getSyncState(resource, scope = null) {\n    return this._syncState.find((object) => {\n      return object.resource === resource && ((object.scope == null && scope === '') || object.scope === scope);\n    });\n  }\n\n  async checkSyncState(account, resource, scope = null) {\n    const oldState = await account.findSyncState({resource, scope: scope || ''});\n    const newState = this.getSyncState(resource, scope || '');\n\n    let needsUpdate = true;\n\n    if (oldState && newState && oldState.hash === newState.hash) {\n      needsUpdate = false;\n    }\n\n    const update = async () => {\n      if (oldState && newState) {\n        oldState.hash = newState.hash;\n        oldState.scope = oldState.scope || '';\n\n        await oldState.save();\n      }\n    };\n\n    return { needsUpdate, state: oldState, update };\n  }\n\n  async execute({account, dataSource}) {\n    this.account = account;\n\n    const result = await this.run({account, dataSource});\n\n    if (this.bar) {\n      console.log('');\n    }\n\n    return result;\n  }\n\n  trigger(name, args) {\n    return app.emit(name, {account: this.account, ...args});\n  }\n\n  get downloading() {\n    return '😀 '.yellow;\n  }\n\n  get processing() {\n    // return '➡️ '.cyan;\n    return '🤔 '.cyan;\n  }\n\n  get finished() {\n    return '😎 '.green;\n  }\n\n  progress({message, count, total}) {\n    // const fmt = count != null ? format('%s :bar :percent (:current/:total) :etas :elapsed', message.green)\n    //                           : format('%s', message.green);\n    const fmt = count != null ? format('%s :bar :percent (:current/:total) :etas :elapsed', message.green)\n                              : format('%s', message.green);\n\n    if (!this.bar) {\n      const options = {\n        width: 40,\n        total: total || 1,\n        complete: '▇'.green,\n        incomplete: '-',\n        clear: false\n      };\n\n      this.bar = new ProgressBar(fmt, options);\n      this.bar.tick(0);\n    }\n\n    this.bar.fmt = fmt;\n\n    if (total != null) {\n      this.bar.total = total || 1;\n    }\n\n    if (this._message !== message) {\n      this.bar.curr = 0;\n      this.bar.render();\n      this._message = message;\n    }\n\n    if (count != null) {\n      this.bar.curr = count;\n      this.bar.render();\n    }\n  }\n\n  async markDeletedObjects(localObjects, newObjects) {\n    // delete all objects that don't exist on the server anymore\n    for (const object of localObjects) {\n      let objectExistsOnServer = false;\n\n      for (const attributes of newObjects) {\n        if (attributes.id === object.id) {\n          objectExistsOnServer = true;\n          break;\n        }\n      }\n\n      if (!objectExistsOnServer) {\n        object._deletedAt = object._deletedAt ? object._deletedAt : new Date();\n        await object.save();\n      }\n    }\n  }\n\n  async lookup(record, resourceID, propName, getter) {\n    if (resourceID) {\n      const object = await new Promise((resolve) => {\n        this.dataSource[getter](resourceID, (err, object) => resolve(object));\n      });\n\n      if (object) {\n        record[propName] = object.rowID;\n      }\n    }\n  }\n}\n"]}
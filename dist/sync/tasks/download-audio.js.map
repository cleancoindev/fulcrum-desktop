{"version":3,"sources":["../../../src/sync/tasks/download-audio.js"],"names":["DownloadAudio","syncResourceName","syncLabel","resourceName","lastSync","account","_lastSyncAudio","fetchObjects","sequence","getAudio","pageSize","findOrCreate","database","attributes","account_id","rowID","resource_id","access_key","process","object","updateFromAPIAttributes","isChanged","isPersisted","parseISOTimestamp","updated_at","getTime","updatedAt","processed","isDownloaded","lookup","form_id","_formRowID","record","findFirstRecord","record_id","_recordRowID","_updatedAt","save","trigger","audio","finish","fail","results","console","log","organizationName","green","red"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,MAAMA,aAAN,oCAA6C;AAC1D,MAAIC,gBAAJ,GAAuB;AACrB,WAAO,OAAP;AACD;;AAED,MAAIC,SAAJ,GAAgB;AACd,WAAO,OAAP;AACD;;AAED,MAAIC,YAAJ,GAAmB;AACjB,WAAO,OAAP;AACD;;AAED,MAAIC,QAAJ,GAAe;AACb,WAAO,KAAKC,OAAL,CAAaC,cAApB;AACD;;AAEKC,cAAN,CAAmBF,OAAnB,EAA4BD,QAA5B,EAAsCI,QAAtC,EAAgD;AAAA;;AAAA;AAC9C,aAAO,iBAAOC,QAAP,CAAgBJ,OAAhB,EAAyBG,QAAzB,EAAmC,MAAKE,QAAxC,CAAP;AAD8C;AAE/C;;AAEDC,eAAaC,QAAb,EAAuBP,OAAvB,EAAgCQ,UAAhC,EAA4C;AAC1C,WAAO,gBAAMF,YAAN,CAAmBC,QAAnB,EAA6B,EAACE,YAAYT,QAAQU,KAArB,EAA4BC,aAAaH,WAAWI,UAApD,EAA7B,CAAP;AACD;;AAEKC,SAAN,CAAcC,MAAd,EAAsBN,UAAtB,EAAkC;AAAA;;AAAA;AAChCM,aAAOC,uBAAP,CAA+BP,UAA/B;;AAEA,YAAMQ,YAAY,CAACF,OAAOG,WAAR,IACA,uBAAUC,iBAAV,CAA4BV,WAAWW,UAAvC,EAAmDC,OAAnD,OAAiEN,OAAOO,SAAP,CAAiBD,OAAjB,EADnF;;AAGA,UAAIZ,WAAWc,SAAf,EAA0B;AACxB,YAAI,CAACR,OAAOS,YAAZ,EAA0B;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACD;AACF,OAbD,MAaO;AACLT,eAAOS,YAAP,GAAsB,KAAtB;AACD;;AAED,UAAIT,OAAOS,YAAP,IAAuB,IAA3B,EAAiC;AAC/BT,eAAOS,YAAP,GAAsB,KAAtB;AACD;;AAED,YAAM,OAAKC,MAAL,CAAYV,MAAZ,EAAoBN,WAAWiB,OAA/B,EAAwC,YAAxC,EAAsD,SAAtD,CAAN;;AAEA,UAAIX,OAAOY,UAAX,EAAuB;AACrB,cAAMC,SAAS,MAAM,OAAK3B,OAAL,CAAa4B,eAAb,CAA6B,EAACjB,aAAaH,WAAWqB,SAAzB,EAA7B,CAArB;;AAEA,YAAIF,MAAJ,EAAY;AACVb,iBAAOgB,YAAP,GAAsBH,OAAOjB,KAA7B;AACD;AACF;;AAED,aAAKV,OAAL,CAAaC,cAAb,GAA8Ba,OAAOiB,UAArC;;AAEA,YAAMjB,OAAOkB,IAAP,EAAN;;AAEA,UAAIhB,SAAJ,EAAe;AACb,cAAM,OAAKiB,OAAL,CAAa,YAAb,EAA2B,EAACC,OAAOpB,MAAR,EAA3B,CAAN;AACD;AA3C+B;AA4CjC;;AAEKqB,QAAN,GAAe;AAAA;;AAAA;AACb;AACA,YAAM,OAAKnC,OAAL,CAAagC,IAAb,EAAN;AAFa;AAGd;;AAEDI,OAAKpC,OAAL,EAAcqC,OAAd,EAAuB;AACrBC,YAAQC,GAAR,CAAYvC,QAAQwC,gBAAR,CAAyBC,KAArC,EAA4C,SAASC,GAArD;AACD;AA9EyD;kBAAvC/C,a","file":"download-audio.js","sourcesContent":["import DownloadSequence from './download-sequence';\nimport Client from '../../api/client';\nimport Audio from '../../models/audio';\nimport { DateUtils } from 'fulcrum-core';\n\nexport default class DownloadAudio extends DownloadSequence {\n  get syncResourceName() {\n    return 'audio';\n  }\n\n  get syncLabel() {\n    return 'audio';\n  }\n\n  get resourceName() {\n    return 'audio';\n  }\n\n  get lastSync() {\n    return this.account._lastSyncAudio;\n  }\n\n  async fetchObjects(account, lastSync, sequence) {\n    return Client.getAudio(account, sequence, this.pageSize);\n  }\n\n  findOrCreate(database, account, attributes) {\n    return Audio.findOrCreate(database, {account_id: account.rowID, resource_id: attributes.access_key});\n  }\n\n  async process(object, attributes) {\n    object.updateFromAPIAttributes(attributes);\n\n    const isChanged = !object.isPersisted ||\n                      DateUtils.parseISOTimestamp(attributes.updated_at).getTime() !== object.updatedAt.getTime();\n\n    if (attributes.processed) {\n      if (!object.isDownloaded) {\n        // queue.push(attributes, function(err) {\n        //   if (err) {\n        //     console.log('ERROR DOWNLOADING', err);\n        //     throw err;\n        //   }\n\n        //   object.isDownloaded = true;\n        //   // do we need to await this somehow?\n        //   object.save();\n        // });\n      }\n    } else {\n      object.isDownloaded = false;\n    }\n\n    if (object.isDownloaded == null) {\n      object.isDownloaded = false;\n    }\n\n    await this.lookup(object, attributes.form_id, '_formRowID', 'getForm');\n\n    if (object._formRowID) {\n      const record = await this.account.findFirstRecord({resource_id: attributes.record_id});\n\n      if (record) {\n        object._recordRowID = record.rowID;\n      }\n    }\n\n    this.account._lastSyncAudio = object._updatedAt;\n\n    await object.save();\n\n    if (isChanged) {\n      await this.trigger('audio:save', {audio: object});\n    }\n  }\n\n  async finish() {\n    // update the lastSync date\n    await this.account.save();\n  }\n\n  fail(account, results) {\n    console.log(account.organizationName.green, 'failed'.red);\n  }\n}\n"]}
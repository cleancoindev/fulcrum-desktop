{"version":3,"sources":["../../../src/sync/tasks/download-records.js"],"names":["PAGE_SIZE","DownloadRecords","constructor","form","args","run","account","dataSource","state","checkSyncState","id","needsUpdate","sequence","_lastSync","getTime","downloadRecords","lastSync","beginFetchTime","Date","progress","message","downloading","name","blue","results","getRecords","getRecordsHistory","totalFetchTime","statusCode","console","log","organizationName","green","red","data","JSON","parse","body","objects","records","db","now","processing","count","total","length","transaction","database","index","attributes","object","findOrCreate","account_id","rowID","resource_id","history_change_type","_form","_formRowID","delete","trigger","record","isChanged","isPersisted","version","updateFromAPIAttributes","updatedAt","lookup","project_id","assigned_to_id","created_by_id","updated_by_id","save","totalTime","finished","cyan","next_sequence","update","resourceID","propName","getter","Promise","resolve","err"],"mappings":"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","file":"download-records.js","sourcesContent":["import Task from './task';\nimport Client from '../../api/Client';\nimport Record from '../../models/record';\nimport {format} from 'util';\n\nconst PAGE_SIZE = 1000;\n\nexport default class DownloadRecords extends Task {\n  constructor({form, ...args}) {\n    super(args);\n\n    this.form = form;\n  }\n\n  async run({account, dataSource}) {\n    const state = await this.checkSyncState(account, 'records', this.form.id);\n\n    if (!state.needsUpdate) {\n      return;\n    }\n\n    const sequence = this.form._lastSync ? this.form._lastSync.getTime() : null;\n\n    this.dataSource = dataSource;\n\n    await this.downloadRecords(account, this.form, this.form._lastSync, sequence, state);\n  }\n\n  async downloadRecords(account, form, lastSync, sequence, state) {\n    const beginFetchTime = new Date();\n\n    this.progress({message: this.downloading + ' ' + this.form.name.blue});\n\n    const results = lastSync == null ? (await Client.getRecords(account, form, sequence, PAGE_SIZE))\n                                     : (await Client.getRecordsHistory(account, form, sequence, PAGE_SIZE));\n\n    const totalFetchTime = new Date().getTime() - beginFetchTime.getTime();\n\n    if (results.statusCode !== 200) {\n      console.log(account.organizationName.green, 'failed'.red, 'to download records in', form.name.blue);\n      return;\n    }\n\n    const data = JSON.parse(results.body);\n\n    const objects = data.records;\n\n    const db = account.db;\n\n    let now = new Date();\n\n    this.progress({message: this.processing + ' ' + this.form.name.blue, count: 0, total: objects.length});\n\n    await db.transaction(async (database) => {\n      for (let index = 0; index < objects.length; ++index) {\n        const attributes = objects[index];\n\n        const object = await Record.findOrCreate(database, {account_id: account.rowID, resource_id: attributes.id});\n\n        if (attributes.history_change_type === 'd') {\n          if (object) {\n            object._form = form;\n            object._formRowID = form.rowID;\n\n            await object.delete();\n\n            await this.trigger('record:delete', {record: object});\n          }\n        } else {\n          const isChanged = !object.isPersisted || attributes.version !== object.version;\n\n          object.updateFromAPIAttributes(attributes);\n          object._form = form;\n          object._formRowID = form.rowID;\n\n          form._lastSync = object.updatedAt;\n\n          await this.lookup(object, attributes.project_id, '_projectRowID', 'getProject');\n          await this.lookup(object, attributes.assigned_to_id, '_assignedToRowID', 'getUser');\n          await this.lookup(object, attributes.created_by_id, '_createdByRowID', 'getUser');\n          await this.lookup(object, attributes.updated_by_id, '_updatedByRowID', 'getUser');\n\n          await object.save();\n\n          if (isChanged) {\n            await this.trigger('record:save', {record: object});\n          }\n        }\n\n        this.progress({message: this.processing + ' ' + this.form.name.blue, count: index + 1, total: objects.length});\n      }\n    });\n\n    const totalTime = new Date().getTime() - now.getTime();\n\n    // update the lastSync date\n    await form.save();\n\n    const message = format(this.finished + ' %s | %s | %s',\n                           form.name.blue,\n                           (totalFetchTime + 'ms').cyan,\n                           (totalTime + 'ms').red);\n\n    this.progress({message, count: objects.length, total: objects.length});\n\n    if (data.next_sequence) {\n      await this.downloadRecords(account, form, lastSync, data.next_sequence, state);\n    } else {\n      await state.update();\n    }\n  }\n\n  async lookup(record, resourceID, propName, getter) {\n    if (resourceID) {\n      const object = await new Promise((resolve) => {\n        this.dataSource[getter](resourceID, (err, object) => resolve(object));\n      });\n\n      if (object) {\n        record[propName] = object.rowID;\n      }\n    }\n  }\n}\n"]}
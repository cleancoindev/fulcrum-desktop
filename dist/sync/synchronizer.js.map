{"version":3,"sources":["../../src/sync/synchronizer.js"],"names":["require","getUserHome","process","env","platform","mediaPath","join","sync","Synchronizer","constructor","_tasks","addTask","task","push","popTask","shift","run","account","formName","dataSource","start","Date","getTime","response","getSync","syncState","JSON","parse","body","resources","taskParams","synchronizer","source","load","db","execute","length","console","log"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAIA;;;;;;;;AAFA;AACA;;;AAEA;;AAEA;;AAEAA,QAAQ,QAAR;;AAEA,SAASC,WAAT,GAAuB;AACrB,SAAOC,QAAQC,GAAR,CAAaD,QAAQE,QAAR,KAAqB,OAAtB,GAAiC,aAAjC,GAAiD,MAA7D,CAAP;AACD;;AAED,MAAMC,YAAY,eAAKC,IAAL,CAAUL,aAAV,EAAyB,WAAzB,EAAsC,eAAtC,CAAlB;;AAEA,iBAAOM,IAAP,CAAYF,SAAZ;AACA,iBAAOE,IAAP,CAAY,eAAKD,IAAL,CAAUD,SAAV,EAAqB,QAArB,CAAZ;AACA,iBAAOE,IAAP,CAAY,eAAKD,IAAL,CAAUD,SAAV,EAAqB,QAArB,CAAZ;AACA,iBAAOE,IAAP,CAAY,eAAKD,IAAL,CAAUD,SAAV,EAAqB,OAArB,CAAZ;AACA,iBAAOE,IAAP,CAAY,eAAKD,IAAL,CAAUD,SAAV,EAAqB,SAArB,CAAZ;;AAEA;;AAEe,MAAMG,YAAN,CAAmB;AAChCC,gBAAc;AACZ,SAAKC,MAAL,GAAc,EAAd;AACD;;AAEDC,UAAQC,IAAR,EAAc;AACZ,SAAKF,MAAL,CAAYG,IAAZ,CAAiBD,IAAjB;AACD;;AAEDE,YAAU;AACR,WAAO,KAAKJ,MAAL,CAAYK,KAAZ,EAAP;AACD;;AAEKC,KAAN,CAAUC,OAAV,EAAmBC,QAAnB,EAA6BC,UAA7B,EAAyC;AAAA;;AAAA;AACvC,YAAMC,QAAQ,IAAIC,IAAJ,GAAWC,OAAX,EAAd;;AAEA,YAAMC,WAAW,MAAM,iBAAOC,OAAP,CAAeP,OAAf,CAAvB;;AAEA,YAAKQ,SAAL,GAAiBC,KAAKC,KAAL,CAAWJ,SAASK,IAApB,EAA0BC,SAA3C;AACA,YAAKC,UAAL,GAAkB,EAAEC,mBAAF,EAAsBN,WAAW,MAAKA,SAAtC,EAAlB;;AAEA,YAAKd,OAAL,CAAa,kCAAwB,MAAKmB,UAA7B,CAAb;AACA,YAAKnB,OAAL,CAAa,yCAA+B,MAAKmB,UAApC,CAAb;AACA,YAAKnB,OAAL,CAAa,+BAAqB,MAAKmB,UAA1B,CAAb;AACA,YAAKnB,OAAL,CAAa,4BAAkB,MAAKmB,UAAvB,CAAb;AACA,YAAKnB,OAAL,CAAa,iCAAuB,MAAKmB,UAA5B,CAAb;;AAEA,YAAMX,WAAWa,MAAX,CAAkBC,IAAlB,CAAuBhB,QAAQiB,EAA/B,CAAN;;AAEA,SAAG;AACD,cAAMtB,OAAO,MAAKE,OAAL,EAAb;;AAEA,cAAMF,KAAKuB,OAAL,CAAa,EAAClB,OAAD,EAAUE,UAAV,EAAb,CAAN;AACD,OAJD,QAIS,MAAKT,MAAL,CAAY0B,MAJrB;;AAMAC,cAAQC,GAAR,CAAY,QAAZ,EAAsB,gCAAiB,IAAIjB,IAAJ,GAAWC,OAAX,KAAuBF,KAAxC,CAAtB;AAtBuC;AAuBxC;AApC+B;kBAAbZ,Y","file":"synchronizer.js","sourcesContent":["import DownloadChoiceLists from './tasks/download-choice-lists';\nimport DownloadClassificationSets from './tasks/download-classification-sets';\nimport DownloadProjects from './tasks/download-projects';\nimport DownloadForms from './tasks/download-forms';\nimport DownloadAllRecords from './tasks/download-all-records';\n\nimport Client from '../api/Client';\nimport path from 'path';\nimport mkdirp from 'mkdirp';\n\n// import exif from 'exif';\n// import Generator from '../reports/generator';\nimport humanizeDuration from 'humanize-duration';\n// import { Database } from 'minidb';\n\n// Database.debug = true;\n\nrequire('colors');\n\nfunction getUserHome() {\n  return process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'];\n}\n\nconst mediaPath = path.join(getUserHome(), 'Documents', 'fulcrum-media');\n\nmkdirp.sync(mediaPath);\nmkdirp.sync(path.join(mediaPath, 'videos'));\nmkdirp.sync(path.join(mediaPath, 'photos'));\nmkdirp.sync(path.join(mediaPath, 'audio'));\nmkdirp.sync(path.join(mediaPath, 'reports'));\n\n// const scrub = (string) => string.replace(/\\0/g, '');\n\nexport default class Synchronizer {\n  constructor() {\n    this._tasks = [];\n  }\n\n  addTask(task) {\n    this._tasks.push(task);\n  }\n\n  popTask() {\n    return this._tasks.shift();\n  }\n\n  async run(account, formName, dataSource) {\n    const start = new Date().getTime();\n\n    const response = await Client.getSync(account);\n\n    this.syncState = JSON.parse(response.body).resources;\n    this.taskParams = { synchronizer: this, syncState: this.syncState };\n\n    this.addTask(new DownloadChoiceLists(this.taskParams));\n    this.addTask(new DownloadClassificationSets(this.taskParams));\n    this.addTask(new DownloadProjects(this.taskParams));\n    this.addTask(new DownloadForms(this.taskParams));\n    this.addTask(new DownloadAllRecords(this.taskParams));\n\n    await dataSource.source.load(account.db);\n\n    do {\n      const task = this.popTask();\n\n      await task.execute({account, dataSource});\n    } while (this._tasks.length);\n\n    console.log('Synced', humanizeDuration(new Date().getTime() - start));\n  }\n}\n"]}
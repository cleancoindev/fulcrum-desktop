{"version":3,"sources":["../src/synchronizer.js"],"names":["SchemaDiffer","Sqlite","Postgres","require","getUserHome","process","env","platform","mediaPath","join","sync","MEDIA_CONCURRENCY","models","Form","ChoiceList","ClassificationSet","Project","Record","Photo","Video","scrub","string","replace","Synchronizer","run","account","formName","dataSource","syncObject","source","load","db","where","account_id","rowID","name","forms","findAll","form","MEDIA","syncVideos","syncPhotos","resolve","reject","syncRecords","objectName","key","results","body","data","JSON","parse","attributes","object","findOrCreate","resource_id","id","oldForm","isPersisted","_id","row_id","_name","elements","_elementsJSON","updateFromAPIAttributes","save","newForm","execute","ident","updateFormTables","tableNameWithForm","console","log","organizationName","green","oldSchema","newSchema","differ","generator","dialect","afterTransform","tablePrefix","statements","generate","transaction","statement","syncVideoPage","page","total","beginFetchTime","Date","getVideos","totalFetchTime","getTime","statusCode","red","now","queue","task","file","access_key","download","original","cyan","file_size","database","videos","processed","isDownloaded","push","err","drain","totalTime","total_pages","yellow","syncPhotoPage","getPhotos","photos","syncRecordPage","_lastSync","lastSync","getRecords","getRecordsHistory","blue","record","reportDirectory","result","basename","size","count","records","history_change_type","_form","_formRowID","delete","createdAt","project_id","project","projectByResourceID","_projectRowID","REPORTS","instance"],"mappings":"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","file":"synchronizer.js","sourcesContent":["import Client from './api/Client';\nimport Form from './models/form';\nimport ChoiceList from './models/choice-list';\nimport ClassificationSet from './models/classification-set';\nimport Project from './models/project';\nimport Record from './models/record';\nimport Photo from './models/photo';\nimport Video from './models/video';\nimport {format} from 'util';\nimport Schema from 'fulcrum-schema/dist/schema';\nimport Metadata from 'fulcrum-schema/dist/metadata';\nimport sqldiff from 'sqldiff';\nimport V2 from 'fulcrum-schema/dist/schemas/postgres-query-v2';\nimport path from 'path';\nimport ConcurrentQueue from './concurrent-queue';\nimport filesize from 'filesize';\nimport Promise from 'bluebird';\nimport mkdirp from 'mkdirp';\nimport RecordValues from './record-values';\n// import exif from 'exif';\nimport Generator from './reports/generator';\n\nimport { Database } from 'minidb';\n\n// Database.debug = true;\n\nconst {SchemaDiffer, Sqlite, Postgres} = sqldiff;\n\nrequire('colors');\n\n// var fs = require('fs');\n// var profiler = require('v8-profiler');\n\nfunction getUserHome() {\n  return process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'];\n}\n\nconst mediaPath = path.join(getUserHome(), 'Documents', 'fulcrum-media');\n\nmkdirp.sync(mediaPath);\nmkdirp.sync(path.join(mediaPath, 'videos'));\nmkdirp.sync(path.join(mediaPath, 'photos'));\nmkdirp.sync(path.join(mediaPath, 'audio'));\nmkdirp.sync(path.join(mediaPath, 'reports'));\n\nconst MEDIA_CONCURRENCY = 10;\n\nconst models = {\n  Form: Form,\n  ChoiceList: ChoiceList,\n  ClassificationSet: ClassificationSet,\n  Project: Project,\n  Record: Record,\n  Photo: Photo,\n  Video: Video\n};\n\nconst scrub = (string) => string.replace(/\\0/g, '');\n\nexport default class Synchronizer {\n  async run(account, formName, dataSource) {\n    // await Promise.all([ this.syncObject('ChoiceList', 'choice_lists', account),\n    //                     this.syncObject('ClassificationSet', 'classification_sets', account),\n    //                     this.syncObject('Project', 'projects', account) ]);\n\n    await this.syncObject('ChoiceList', 'choice_lists', account);\n    await this.syncObject('ClassificationSet', 'classification_sets', account);\n    await this.syncObject('Project', 'projects', account);\n\n    await this.syncObject('Form', 'forms', account);\n\n    await dataSource.source.load(account.db);\n\n    const where = {\n      account_id: account.rowID\n    };\n\n    if (formName) {\n      where.name = formName;\n    }\n\n    const forms = await Form.findAll(account.db, where, 'name ASC');\n\n    for (const form of forms) {\n      if (process.env.MEDIA === '1') {\n        await this.syncVideos(account, form);\n        await this.syncPhotos(account, form);\n      }\n\n      await new Promise((resolve, reject) => {\n        form.load(dataSource, resolve);\n      });\n\n      await this.syncRecords(account, form);\n    }\n  }\n\n  async syncObject(objectName, key, account) {\n    const results = await Client['get' + objectName + 's'](account);\n\n    const body = results.body;\n\n    const data = JSON.parse(body);\n\n    for (const attributes of data[key]) {\n      const object = await models[objectName].findOrCreate(account.db, {resource_id: attributes.id, account_id: account.rowID});\n      let oldForm = null;\n\n      if (object.isPersisted) {\n        oldForm = {\n          id: object._id,\n          row_id: object.rowID,\n          name: object._name,\n          elements: object._elementsJSON\n        };\n      }\n\n      object.updateFromAPIAttributes(attributes);\n\n      await object.save();\n\n      if (objectName === 'Form') {\n        const newForm = {row_id: object.rowID,\n                         name: object._name,\n                         elements: object._elementsJSON};\n\n        await account.db.execute(format('DROP VIEW IF EXISTS %s',\n                                        account.db.ident(object.name)));\n\n        await this.updateFormTables(account, oldForm, newForm);\n\n        await account.db.execute(format('CREATE VIEW %s AS SELECT * FROM %s_view_full',\n                                        account.db.ident(object.name),\n                                        RecordValues.tableNameWithForm(object)));\n      }\n    }\n\n    console.log(account.organizationName.green, 'downloaded ' + key);\n  }\n\n  async updateFormTables(account, oldForm, newForm) {\n    let oldSchema = null;\n    let newSchema = null;\n\n    if (oldForm) {\n      oldSchema = new Schema(oldForm, V2, null);\n    }\n\n    if (newForm) {\n      newSchema = new Schema(newForm, V2, null);\n    }\n\n    const differ = new SchemaDiffer(oldSchema, newSchema);\n\n    let generator = null;\n\n    if (account.db.dialect === 'sqlite') {\n      // const meta = new Metadata(differ, {quote: '`', prefix: 'account_' + account.rowID + '_'});\n      // generator = new Sqlite(differ, {afterTransform: meta.build.bind(meta)});\n      generator = new Sqlite(differ, {afterTransform: null});\n    } else if (account.db.dialect === 'postgresql') {\n      // const meta = new Metadata(differ, {quote: '\"', prefix: 'account_' + account.rowID + '_'});\n      // generator = new Postgres(differ, {afterTransform: meta.build.bind(meta)});\n      generator = new Postgres(differ, {afterTransform: null});\n    }\n\n    generator.tablePrefix = 'account_' + account.rowID + '_';\n\n    const statements = generator.generate();\n\n    await account.db.transaction(async (db) => {\n      for (const statement of statements) {\n        await db.execute(statement);\n      }\n    });\n  }\n\n  async syncVideos(account, form) {\n    return this.syncVideoPage(account, form, 1);\n  }\n\n  async syncVideoPage(account, form, page, total) {\n    const beginFetchTime = new Date();\n\n    const results = await Client.getVideos(account, form, page);\n\n    const totalFetchTime = new Date().getTime() - beginFetchTime.getTime();\n\n    const body = results.body;\n\n    if (results.statusCode !== 200) {\n      console.log(account.organizationName.green, 'failed'.red, 'to download videos');\n      return;\n    }\n\n    const data = JSON.parse(body);\n\n    const db = account.db;\n\n    let now = new Date();\n\n    const queue = new ConcurrentQueue(async function (task) {\n      const file = path.join(mediaPath, 'videos', task.access_key + '.mp4');\n\n      await Client.download(task.original, file);\n\n      console.log(format('%s downloaded video | %s | %s',\n                         account.organizationName.green,\n                         task.access_key.cyan,\n                         filesize(task.file_size).red));\n    }, MEDIA_CONCURRENCY);\n\n    await db.transaction(async function (database) {\n      for (const attributes of data.videos) {\n        const object = await models.Video.findOrCreate(database, {account_id: account.rowID, resource_id: attributes.access_key});\n\n        object.updateFromAPIAttributes(attributes);\n\n        if (attributes.processed) {\n          if (!object.isDownloaded) {\n            queue.push(attributes, function(err) {\n              if (err) {\n                console.log('ERROR DOWNLOADING', err);\n                throw err;\n              }\n\n              object.isDownloaded = true;\n              // do we need to await this somehow?\n              object.save();\n            });\n          }\n        } else {\n          object.isDownloaded = false;\n        }\n\n        if (object.isDownloaded == null) {\n          object.isDownloaded = false;\n        }\n\n        await object.save();\n      }\n    });\n\n    await queue.drain();\n\n    const totalTime = new Date().getTime() - now.getTime();\n\n    console.log(format('%s downloaded videos | %s | %s | %s',\n                       account.organizationName.green,\n                       format('page %s/%s', page, data.total_pages || 1).yellow,\n                       (totalFetchTime + 'ms').cyan + ' (api)'.red,\n                       (totalTime + 'ms').cyan + ' (db)'.red));\n\n    if (data.total_pages > page) {\n      await this.syncVideoPage(account, form, page + 1, data.total_pages);\n    }\n  }\n\n  async syncPhotos(account, form) {\n    return this.syncPhotoPage(account, form, 1);\n  }\n\n  async syncPhotoPage(account, form, page, total) {\n    const beginFetchTime = new Date();\n\n    const results = await Client.getPhotos(account, form, page);\n\n    const totalFetchTime = new Date().getTime() - beginFetchTime.getTime();\n\n    const body = results.body;\n\n    if (results.statusCode !== 200) {\n      console.log(account.organizationName.green, 'failed'.red, 'to download photos');\n      return;\n    }\n\n    const data = JSON.parse(body);\n\n    const db = account.db;\n\n    let now = new Date();\n\n    // const extractExif = (filePath) => {\n    //   return new Promise((resolve, reject) => {\n    //     /* eslint-disable no-new */\n    //     new exif.ExifImage({image: filePath}, (err, exifData) => {\n    //     /* eslint-enable no-new */\n    //       console.log(exifData.gps);\n\n    //       if (err) {\n    //         reject(err);\n    //       } else {\n    //         resolve(exifData);\n    //       }\n    //     });\n    //   });\n    // };\n\n    const queue = new ConcurrentQueue(async function (task) {\n      const file = path.join(mediaPath, 'photos', task.access_key + '.jpg');\n\n      await Client.download(task.original, file);\n\n      // await extractExif(file);\n\n      console.log(format('%s downloaded photo | %s | %s',\n                         account.organizationName.green,\n                         task.access_key.cyan,\n                         filesize(task.file_size).red));\n    }, MEDIA_CONCURRENCY);\n\n    await db.transaction(async function (database) {\n      for (const attributes of data.photos) {\n        const object = await models.Photo.findOrCreate(database, {account_id: account.rowID, resource_id: attributes.access_key});\n\n        object.updateFromAPIAttributes(attributes);\n\n        if (attributes.processed) {\n          if (!object.isDownloaded) {\n            queue.push(attributes, function(err) {\n              if (err) {\n                console.log('ERROR DOWNLOADING', err);\n                throw err;\n              }\n\n              object.isDownloaded = true;\n              // do we need to await this somehow?\n              object.save();\n            });\n          }\n        } else {\n          object.isDownloaded = false;\n        }\n\n        if (object.isDownloaded == null) {\n          object.isDownloaded = false;\n        }\n\n        await object.save();\n      }\n    });\n\n    await queue.drain();\n\n    const totalTime = new Date().getTime() - now.getTime();\n\n    console.log(format('%s downloaded photos | %s | %s | %s',\n                       account.organizationName.green,\n                       format('page %s/%s', page, data.total_pages || 1).yellow,\n                       (totalFetchTime + 'ms').cyan + ' (api)'.red,\n                       (totalTime + 'ms').cyan + ' (db)'.red));\n\n    if (data.total_pages > page) {\n      await this.syncPhotoPage(account, form, page + 1, data.total_pages);\n    }\n  }\n\n  async syncRecords(account, form) {\n    return this.syncRecordPage(account, form, 1, null, form._lastSync);\n  }\n\n  async syncRecordPage(account, form, page, total, lastSync) {\n    const beginFetchTime = new Date();\n\n    const results = lastSync == null ? (await Client.getRecords(account, form, page))\n                                     : (await Client.getRecordsHistory(account, form, page, lastSync))\n    // const results = form.lastSync != null ? (await Client.getRecordsHistory(account, form, page))\n    //                                       : (await Client.getRecordsHistory(account, form, page))\n\n    const totalFetchTime = new Date().getTime() - beginFetchTime.getTime();\n\n    const body = results.body;\n\n    if (results.statusCode !== 200) {\n      console.log(account.organizationName.green, 'failed'.red, 'to download records in', form.name.blue);\n      return;\n    }\n\n    const data = JSON.parse(body);\n\n    const db = account.db;\n\n    let now = new Date();\n\n    // profiler.startProfiling('1', true);\n\n    const queue = new ConcurrentQueue(async function (task) {\n      const generator = new Generator(task.record);\n\n      const reportDirectory = path.join(mediaPath, 'reports', form.name);\n\n      mkdirp.sync(reportDirectory);\n\n      const result = await generator.generate(reportDirectory);\n\n      console.log(format('%s generated report | %s | %s',\n                         account.organizationName.green,\n                         path.basename(result.file).cyan,\n                         filesize(result.size).red));\n    }, MEDIA_CONCURRENCY);\n\n    let count = 0;\n\n    await db.transaction(async function (database) {\n      for (const attributes of data.records) {\n        const object = await models.Record.findOrCreate(database, {account_id: account.rowID, resource_id: attributes.id});\n\n        if (attributes.history_change_type === 'd') {\n          if (object) {\n            object._form = form;\n            object._formRowID = form.rowID;\n\n            await object.delete();\n          }\n        } else {\n\n          object.updateFromAPIAttributes(attributes);\n          object._form = form;\n          object._formRowID = form.rowID;\n\n          form._lastSync = object.createdAt;\n\n          if (attributes.project_id) {\n            const project = await account.projectByResourceID(attributes.project_id);\n\n            if (project) {\n              object._projectRowID = project.rowID;\n            }\n          }\n\n          await object.save();\n\n          if (process.env.REPORTS === '1') {\n            queue.push({record: object}, function(err) {\n              if (err) {\n                console.log('ERROR Generating Report', err);\n                throw err;\n              }\n\n              // object.isDownloaded = true;\n              // object.save();\n            });\n          }\n        }\n      }\n    });\n\n    const totalTime = new Date().getTime() - now.getTime();\n\n    // update the lastSync date\n    await form.save();\n\n    // var profile1 = profiler.stopProfiling();\n\n    // console.log(profile1.getHeader());\n\n    // profile1.export(function (error, result) {\n    //   if (error) {\n    //     throw error;\n    //   }\n    //   fs.writeFileSync('profile1.cpuprofile', result);\n    //   profile1.delete();\n    // });\n\n    await queue.drain();\n\n    console.log(format('%s downloaded records in %s | %s | %s | %s',\n                       account.organizationName.green,\n                       form.name.blue,\n                       format('page %s/%s', page, data.total_pages || 1).yellow,\n                       (totalFetchTime + 'ms').cyan + ' (api)'.red,\n                       (totalTime + 'ms').cyan + ' (db)'.red));\n\n    if (data.total_pages > page) {\n      await this.syncRecordPage(account, form, page + 1, data.total_pages, lastSync);\n    }\n  }\n}\n\nSynchronizer.instance = new Synchronizer();\n"]}
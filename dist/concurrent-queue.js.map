{"version":3,"sources":["../src/concurrent-queue.js"],"names":["DEFAULT_CONCURRENCY","ConcurrentQueue","constructor","worker","concurrency","queue","task","callback","then","catch","drain","drainResolver","push","handler","Promise","resolve","reject","idle"],"mappings":";;;;;;AAAA;;AAEA,MAAMA,sBAAsB,CAA5B;;AAEe,MAAMC,eAAN,CAAsB;AACnCC,cAAYC,MAAZ,EAAoBC,WAApB,EAAiC;AAC/B,SAAKD,MAAL,GAAcA,MAAd;;AAEA,SAAKE,KAAL,GAAa,kBAAM,CAACC,IAAD,EAAOC,QAAP,KAAoB;AACrC,WAAKJ,MAAL,CAAYG,IAAZ,EAAkBE,IAAlB,CAAuBD,QAAvB,EAAiCE,KAAjC,CAAuCF,QAAvC;AACD,KAFY,EAEVH,eAAeJ,mBAFL,CAAb;;AAIA,SAAKK,KAAL,CAAWK,KAAX,GAAmB,MAAM;AACvB,UAAI,KAAKC,aAAT,EAAwB;AACtB,aAAKA,aAAL;AACA,aAAKA,aAAL,GAAqB,IAArB;AACD;AACF,KALD;AAMD;;AAEDC,OAAKN,IAAL,EAAWO,OAAX,EAAoB;AAClB,SAAKR,KAAL,CAAWO,IAAX,CAAgBN,IAAhB,EAAsBO,OAAtB;AACD;;AAEDH,UAAQ;AACN,WAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAI,KAAKX,KAAL,CAAWY,IAAX,EAAJ,EAAuB;AACrBF;AACD,OAFD,MAEO;AACL,aAAKJ,aAAL,GAAqBI,OAArB;AACD;AACF,KANM,CAAP;AAOD;AA5BkC;kBAAhBd,e","file":"concurrent-queue.js","sourcesContent":["import {queue} from 'async';\n\nconst DEFAULT_CONCURRENCY = 5;\n\nexport default class ConcurrentQueue {\n  constructor(worker, concurrency) {\n    this.worker = worker;\n\n    this.queue = queue((task, callback) => {\n      this.worker(task).then(callback).catch(callback);\n    }, concurrency || DEFAULT_CONCURRENCY);\n\n    this.queue.drain = () => {\n      if (this.drainResolver) {\n        this.drainResolver();\n        this.drainResolver = null;\n      }\n    };\n  }\n\n  push(task, handler) {\n    this.queue.push(task, handler);\n  }\n\n  drain() {\n    return new Promise((resolve, reject) => {\n      if (this.queue.idle()) {\n        resolve();\n      } else {\n        this.drainResolver = resolve;\n      }\n    });\n  }\n}\n"]}
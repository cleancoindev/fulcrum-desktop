{"version":3,"sources":["../../src/api/client.js"],"names":["req","promisify","defaultOptions","headers","baseURL","Client","urlForResource","resource","optionsForRequest","account","options","result","extend","token","authenticate","userName","password","method","uri","auth","username","sendImmediately","resolve","reject","err","response","body","getForms","url","getChoiceLists","getClassificationSets","getProjects","ex","console","log","code","connect","getPhotos","form","page","qs","per_page","full","form_id","id","getVideos","download","to","rq","pipe","createWriteStream","on","getRecords","getRecordsHistory","lastSync","updated_since","getTime","client"],"mappings":"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","file":"client.js","sourcesContent":["import request from 'request';\nimport Promise from 'bluebird';\nimport _ from 'lodash';\nimport fs from 'fs';\n\nconst req = Promise.promisify(request);\n\nconst defaultOptions = {\n  headers: {\n    'User-Agent': 'Fulcrum Sync',\n    'Accept': 'application/json'\n  }\n};\n\n// const baseURL = 'http://localhost:3000/api/v2/';\n// const baseURL = 'https://api.fulcrumapp.com/api/v2/';\nconst baseURL = 'https://edge.fulcrumapp.com/api/v2/';\n\nclass Client {\n  urlForResource(resource) {\n    return '' + baseURL + resource;\n  }\n\n  optionsForRequest(account, options) {\n    const result = _.extend({}, defaultOptions, options);\n    result.headers['X-ApiToken'] = account.token;\n    return result;\n  }\n\n  async authenticate(userName, password) {\n    const options = {\n      method: 'GET',\n      uri: this.urlForResource('users'),\n      auth: {\n        username: userName,\n        password: password,\n        sendImmediately: true\n      },\n      headers: defaultOptions.headers\n    };\n\n    return new Promise((resolve, reject) => {\n      request(options, (err, response, body) => {\n        if (err) {\n          return reject(err);\n        } else {\n          return resolve(response);\n        }\n      });\n    });\n  }\n\n  async getForms(account) {\n    const options = this.optionsForRequest(account, {\n      url: this.urlForResource('forms')\n    });\n\n    return await req(options);\n  }\n\n  async getChoiceLists(account) {\n    const options = this.optionsForRequest(account, {\n      url: this.urlForResource('choice_lists')\n    });\n\n    return await req(options);\n  }\n\n  async getClassificationSets(account) {\n    const options = this.optionsForRequest(account, {\n      url: this.urlForResource('classification_sets')\n    });\n\n    return await req(options);\n  }\n\n  async getProjects(account) {\n    const options = this.optionsForRequest(account, {\n      url: this.urlForResource('projects')\n    });\n\n    try {\n      return await req(options);\n    } catch (ex) {\n      console.log(ex);\n      console.log(ex.code === 'ETIMEDOUT');\n      console.log(ex.connect === true);\n      throw ex;\n    }\n  }\n\n  async getPhotos(account, form, page) {\n    const options = this.optionsForRequest(account, {\n      url: this.urlForResource('photos')\n    });\n\n    options.qs = {\n      per_page: 1000,\n      page: page,\n      full: '1'\n    };\n\n    if (form) {\n      options.qs.form_id = form.id;\n    }\n\n    return await req(options);\n  }\n\n  async getVideos(account, form, page) {\n    const options = this.optionsForRequest(account, {\n      url: this.urlForResource('videos')\n    });\n\n    options.qs = {\n      per_page: 1000,\n      page: page,\n      full: '1'\n    };\n\n    if (form) {\n      options.qs.form_id = form.id;\n    }\n\n    return await req(options);\n  }\n\n  download(url, to) {\n    return new Promise((resolve, reject) => {\n      const rq = request(url).pipe(fs.createWriteStream(to));\n      rq.on('close', resolve);\n      rq.on('error', reject);\n    });\n  }\n\n  async getRecords(account, form, page) {\n    const options = this.optionsForRequest(account, {\n      // url: this.urlForResource('records/history')\n      url: this.urlForResource('records')\n    });\n\n    options.qs = {\n      form_id: form.id,\n      per_page: 1000,\n      page: page\n    };\n\n    return await req(options);\n  }\n\n  async getRecordsHistory(account, form, page, lastSync) {\n    const options = this.optionsForRequest(account, {\n      url: this.urlForResource('records/history')\n    });\n\n    options.qs = {\n      form_id: form.id,\n      per_page: 1000,\n      page: page,\n      updated_since: lastSync ? lastSync.getTime() / 1000 : 0\n    };\n\n    return await req(options);\n  }\n}\n\nconst client = new Client();\n\nexport default client;\n"]}
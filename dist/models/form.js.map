{"version":3,"sources":["../../src/models/form.js"],"names":["Form","tableName","columns","name","column","type","null","findEachRecord","where","callback","findEach","db","form_id","rowID","findRecordsBySQL","sql","values","_accountRowID","rows","all","records","row","attributes","queryRowToAttributes","record","_db","push","register"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEe,MAAMA,IAAN,2BAA4B;AACzC,aAAWC,SAAX,GAAuB;AACrB,WAAO,OAAP;AACD;;AAED,aAAWC,OAAX,GAAqB;AACnB,WAAO,CACL,EAAEC,MAAM,cAAR,EAAwBC,QAAQ,YAAhC,EAA8CC,MAAM,SAApD,EAA+DC,MAAM,KAArE,EADK,EAEL,EAAEH,MAAM,IAAR,EAAcC,QAAQ,aAAtB,EAAqCC,MAAM,QAA3C,EAAqDC,MAAM,KAA3D,EAFK,EAGL,EAAEH,MAAM,MAAR,EAAgBC,QAAQ,MAAxB,EAAgCC,MAAM,QAAtC,EAAgDC,MAAM,KAAtD,EAHK,EAIL,EAAEH,MAAM,SAAR,EAAmBC,QAAQ,SAA3B,EAAsCC,MAAM,SAA5C,EAAuDC,MAAM,KAA7D,EAJK,EAKL,EAAEH,MAAM,aAAR,EAAuBC,QAAQ,aAA/B,EAA8CC,MAAM,QAApD,EALK,EAML,EAAEF,MAAM,cAAR,EAAwBC,QAAQ,UAAhC,EAA4CC,MAAM,MAAlD,EAA0DC,MAAM,KAAhE,EANK,EAOL,EAAEH,MAAM,oBAAR,EAA8BC,QAAQ,kBAAtC,EAA0DC,MAAM,MAAhE,EAPK,EAQL,EAAEF,MAAM,iBAAR,EAA2BC,QAAQ,cAAnC,EAAmDC,MAAM,MAAzD,EARK,EASL,EAAEF,MAAM,UAAR,EAAoBC,QAAQ,WAA5B,EAAyCC,MAAM,UAA/C,EATK,EAUL,EAAEF,MAAM,WAAR,EAAqBC,QAAQ,YAA7B,EAA2CC,MAAM,UAAjD,EAA6DC,MAAM,KAAnE,EAVK,EAWL,EAAEH,MAAM,WAAR,EAAqBC,QAAQ,YAA7B,EAA2CC,MAAM,UAAjD,EAA6DC,MAAM,KAAnE,EAXK,EAYL,EAAEH,MAAM,WAAR,EAAqBC,QAAQ,YAA7B,EAA2CC,MAAM,UAAjD,EAZK,CAAP;AAcD;;AAEDE,iBAAeC,KAAf,EAAsBC,QAAtB,EAAgC;AAC9B,WAAO,iBAAOC,QAAP,CAAgB,KAAKC,EAArB,EAAyB,EAACH,oBAAWA,KAAX,IAAkBI,SAAS,KAAKC,KAAhC,GAAD,EAAzB,EAAmEJ,QAAnE,CAAP;AACD;;AAEKK,kBAAN,CAAuBC,GAAvB,EAA4BC,MAA5B,EAAoC;AAAA;;AAAA;AAClC,YAAMf,YAAa,WAAU,MAAKgB,aAAc,SAAQ,MAAKJ,KAAM,YAAnE;;AAEAE,YAAM,mBAAmBd,SAAnB,IAAgCc,MAAM,YAAYA,GAAlB,GAAwB,EAAxD,CAAN;;AAEA,YAAMG,OAAO,MAAM,MAAKP,EAAL,CAAQQ,GAAR,CAAYJ,GAAZ,EAAiBC,MAAjB,CAAnB;;AAEA,YAAMI,UAAU,EAAhB;;AAEA,WAAK,MAAMC,GAAX,IAAkBH,IAAlB,EAAwB;AACtB,cAAMI,aAAa,iBAAOC,oBAAP,CAA4BF,GAA5B,CAAnB;;AAEA,cAAMG,SAAS,qBAAWF,UAAX,QAAf;;AAEAE,eAAOC,GAAP,GAAa,MAAKd,EAAlB;;AAEAS,gBAAQM,IAAR,CAAaF,MAAb;AACD;;AAED,aAAOJ,OAAP;AAnBkC;AAoBnC;AA9CwC;;kBAAtBpB,I;AAiDrB,yBAAiB2B,QAAjB,CAA0B3B,IAA1B","file":"form.js","sourcesContent":["import { PersistentObject } from 'minidb';\nimport { Form as FormBase } from 'fulcrum-core';\nimport Record from './record';\n\nexport default class Form extends FormBase {\n  static get tableName() {\n    return 'forms';\n  }\n\n  static get columns() {\n    return [\n      { name: 'accountRowID', column: 'account_id', type: 'integer', null: false },\n      { name: 'id', column: 'resource_id', type: 'string', null: false },\n      { name: 'name', column: 'name', type: 'string', null: false },\n      { name: 'version', column: 'version', type: 'integer', null: false },\n      { name: 'description', column: 'description', type: 'string' },\n      { name: 'elementsJSON', column: 'elements', type: 'json', null: false },\n      { name: 'titleFieldKeysJSON', column: 'title_field_keys', type: 'json' },\n      { name: 'statusFieldJSON', column: 'status_field', type: 'json' },\n      { name: 'lastSync', column: 'last_sync', type: 'datetime' },\n      { name: 'createdAt', column: 'created_at', type: 'datetime', null: false },\n      { name: 'updatedAt', column: 'updated_at', type: 'datetime', null: false },\n      { name: 'deletedAt', column: 'deleted_at', type: 'datetime' }\n    ];\n  }\n\n  findEachRecord(where, callback) {\n    return Record.findEach(this.db, {where: {...where, form_id: this.rowID}}, callback);\n  }\n\n  async findRecordsBySQL(sql, values) {\n    const tableName = `account_${this._accountRowID}_form_${this.rowID}_view_full`;\n\n    sql = 'SELECT * FROM ' + tableName + (sql ? ' WHERE ' + sql : '');\n\n    const rows = await this.db.all(sql, values);\n\n    const records = [];\n\n    for (const row of rows) {\n      const attributes = Record.queryRowToAttributes(row);\n\n      const record = new Record(attributes, this);\n\n      record._db = this.db;\n\n      records.push(record);\n    }\n\n    return records;\n  }\n}\n\nPersistentObject.register(Form);\n"]}
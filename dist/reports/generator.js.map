{"version":3,"sources":["../../src/reports/generator.js"],"names":["move","promisify","Generator","constructor","record","renderValues","feature","renderFunction","element","formValues","container","elements","formValue","get","key","contentTemplate","readFileSync","join","__dirname","toString","generate","directory","data","DateUtils","options","html","render","topdf","result","run","outputPath","reportName","displayValue","id","file","cleanup","size","template","header","footer","cover","ejsOptions","bodyContent","headerContent","footerContent","coverContent"],"mappings":"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","file":"generator.js","sourcesContent":["import ejs from 'ejs';\nimport fs from 'fs';\nimport mv from 'mv';\nimport path from 'path';\nimport { DateUtils } from 'fulcrum-core';\nimport HtmlToPdf from './html-to-pdf';\nimport Promise from 'bluebird';\nimport sanitize from 'sanitize-filename';\n\nconst move = Promise.promisify(mv);\n\nexport default class Generator {\n  constructor(record) {\n    this.record = record;\n  }\n\n  get contentTemplate() {\n    return fs.readFileSync(path.join(__dirname, 'template.ejs')).toString();\n  }\n\n  async generate(directory) {\n    const data = {\n      DateUtils: DateUtils,\n      record: this.record,\n      renderValues: this.renderValues\n    };\n\n    const options = {};\n\n    const html = ejs.render(this.contentTemplate, data, options);\n\n    const topdf = new HtmlToPdf(html);\n\n    const result = await topdf.run();\n\n    let outputPath = null;\n\n    if (result) {\n      const reportName = sanitize(this.record.displayValue || this.record.id);\n\n      outputPath = path.join(directory, reportName + '.pdf');\n\n      await move(result.file, outputPath);\n    }\n\n    await topdf.cleanup();\n\n    return {file: outputPath, size: result.size};\n  }\n\n  renderValues = (feature, renderFunction) => {\n    for (const element of feature.formValues.container.elements) {\n      const formValue = feature.formValues.get(element.key);\n\n      if (formValue) {\n        renderFunction(element, formValue);\n      }\n    }\n  }\n\n  static async generate({reportName, template, header, footer, cover, data, directory, ejsOptions}) {\n    const bodyContent = ejs.render(template, data, ejsOptions);\n    const headerContent = header ? ejs.render(header, data, ejsOptions) : null;\n    const footerContent = footer ? ejs.render(footer, data, ejsOptions) : null;\n    const coverContent = cover ? ejs.render(cover, data, ejsOptions) : null;\n\n    const topdf = new HtmlToPdf(bodyContent, headerContent, footerContent, coverContent);\n\n    const result = await topdf.run();\n\n    let outputPath = null;\n\n    if (result) {\n      outputPath = path.join(directory, sanitize(reportName) + '.pdf');\n\n      await move(result.file, outputPath);\n    }\n\n    await topdf.cleanup();\n\n    return {file: outputPath, size: result.size};\n  }\n}\n"]}